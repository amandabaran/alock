syntax = "proto2";

import "protos/metrics.proto";
import "protos/colosseum.proto";

enum Mode {
  SERVER = 0;
  CLIENT = 1;
};

enum Ycsb {
  A = 0; // 50% Get 50% Insert
  B = 1; // 95% Get 5% Insert
  C = 2; // 100% Get
  D = 3; // Latest
  E = 4; // Scan
  R = 5; // Read-then-write
};

message NodeProto {
  optional uint32 nid = 1;
  optional string public_hostname = 2;
  optional string private_hostname = 3;
  optional uint32 port = 4;
};

message ClusterProto {
  repeated NodeProto servers = 1;
  repeated NodeProto clients = 2;
  optional string domain = 3;
  optional string node_type = 4;
};

message AckProto {};

message Workload {
  optional string ycsb = 1;
  
  // Length of "critical section"
  optional uint32 think_time_ns = 2;

  // The benchmark length in seconds
  optional int32 runtime = 3;

  optional uint64 min_key = 4;
  optional uint64 max_key = 5;

  optional uint32 theta = 6;
  
};

message RemotePtrProto {
  optional uint64 raw = 1;
};

message ExperimentParams {
  // A name to give the experiment, used to prefix the result file
  optional string name = 1;

  // The mode determining how to run the benchmark (i.e., "client" or "server")
  optional Mode mode = 2;

  // The number of servers in the system
  optional uint32 num_servers = 3;

  optional Workload workload = 11;

  // A list of client ids to run on this node when running in client mode
  repeated uint32 client_ids = 4;

  optional uint32 server_id = 12;

  // The offered load in queries (or ops) per second
  optional int32 max_qps = 6;

  // The rate at which the actual QPS is sampled in milliseconds
  optional uint32 sampling_rate_ms = 7;

  // Directory where the results file is saved
  optional string save_dir = 8;

  // The following are filled in automatically and will be overwritten

  // The number of nodes in the cluster.
  optional uint32 cluster_size = 9;

  // The number of clients in the system
  optional uint32 num_clients = 10;
};

message CloudlabClusterProto {
  optional ClusterProto cluster = 1;
  optional string domain = 2;
  optional string node_type = 3;
};

message ResultProto {
  optional ExperimentParams experiment_params = 1;
  optional NodeProto client = 2;
  optional rome.WorkloadDriverProto driver = 3;
};


message ResultsProto {
  optional uint32 cluster_size = 4;
  optional ExperimentParams experiment_params = 1;
  repeated ResultProto results = 2;
}