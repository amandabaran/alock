// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: experiment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_experiment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_experiment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "workloaddriver.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_experiment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_experiment_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_experiment_2eproto;
class AckProto;
class AckProtoDefaultTypeInternal;
extern AckProtoDefaultTypeInternal _AckProto_default_instance_;
class ExperimentParams;
class ExperimentParamsDefaultTypeInternal;
extern ExperimentParamsDefaultTypeInternal _ExperimentParams_default_instance_;
class ResultProto;
class ResultProtoDefaultTypeInternal;
extern ResultProtoDefaultTypeInternal _ResultProto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AckProto* Arena::CreateMaybeMessage<::AckProto>(Arena*);
template<> ::ExperimentParams* Arena::CreateMaybeMessage<::ExperimentParams>(Arena*);
template<> ::ResultProto* Arena::CreateMaybeMessage<::ResultProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class AckProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AckProto) */ {
 public:
  inline AckProto() : AckProto(nullptr) {};
  virtual ~AckProto();

  AckProto(const AckProto& from);
  AckProto(AckProto&& from) noexcept
    : AckProto() {
    *this = ::std::move(from);
  }

  inline AckProto& operator=(const AckProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckProto& operator=(AckProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AckProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckProto* internal_default_instance() {
    return reinterpret_cast<const AckProto*>(
               &_AckProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AckProto& a, AckProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AckProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckProto* New() const final {
    return CreateMaybeMessage<AckProto>(nullptr);
  }

  AckProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckProto& from);
  void MergeFrom(const AckProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AckProto";
  }
  protected:
  explicit AckProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_experiment_2eproto);
    return ::descriptor_table_experiment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AckProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_experiment_2eproto;
};
// -------------------------------------------------------------------

class ExperimentParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExperimentParams) */ {
 public:
  inline ExperimentParams() : ExperimentParams(nullptr) {};
  virtual ~ExperimentParams();

  ExperimentParams(const ExperimentParams& from);
  ExperimentParams(ExperimentParams&& from) noexcept
    : ExperimentParams() {
    *this = ::std::move(from);
  }

  inline ExperimentParams& operator=(const ExperimentParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExperimentParams& operator=(ExperimentParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExperimentParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExperimentParams* internal_default_instance() {
    return reinterpret_cast<const ExperimentParams*>(
               &_ExperimentParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExperimentParams& a, ExperimentParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ExperimentParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExperimentParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExperimentParams* New() const final {
    return CreateMaybeMessage<ExperimentParams>(nullptr);
  }

  ExperimentParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExperimentParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExperimentParams& from);
  void MergeFrom(const ExperimentParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExperimentParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExperimentParams";
  }
  protected:
  explicit ExperimentParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_experiment_2eproto);
    return ::descriptor_table_experiment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnlimitedStreamFieldNumber = 5,
    kKeyLbFieldNumber = 10,
    kNodeCountFieldNumber = 14,
    kQpsSampleRateFieldNumber = 2,
    kMaxQpsSecondFieldNumber = 3,
    kRuntimeFieldNumber = 4,
    kOpCountFieldNumber = 6,
    kContainsFieldNumber = 7,
    kInsertFieldNumber = 8,
    kRemoveFieldNumber = 9,
    kKeyUbFieldNumber = 11,
    kRegionSizeFieldNumber = 12,
    kThreadCountFieldNumber = 13,
    kQpMaxFieldNumber = 15,
    kNodeIdFieldNumber = 16,
  };
  // required bool unlimited_stream = 5 [default = false];
  bool has_unlimited_stream() const;
  private:
  bool _internal_has_unlimited_stream() const;
  public:
  void clear_unlimited_stream();
  bool unlimited_stream() const;
  void set_unlimited_stream(bool value);
  private:
  bool _internal_unlimited_stream() const;
  void _internal_set_unlimited_stream(bool value);
  public:

  // required int32 key_lb = 10 [default = 0];
  bool has_key_lb() const;
  private:
  bool _internal_has_key_lb() const;
  public:
  void clear_key_lb();
  ::PROTOBUF_NAMESPACE_ID::int32 key_lb() const;
  void set_key_lb(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key_lb() const;
  void _internal_set_key_lb(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 node_count = 14 [default = 0];
  bool has_node_count() const;
  private:
  bool _internal_has_node_count() const;
  public:
  void clear_node_count();
  ::PROTOBUF_NAMESPACE_ID::int32 node_count() const;
  void set_node_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_node_count() const;
  void _internal_set_node_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 qps_sample_rate = 2 [default = 10];
  bool has_qps_sample_rate() const;
  private:
  bool _internal_has_qps_sample_rate() const;
  public:
  void clear_qps_sample_rate();
  ::PROTOBUF_NAMESPACE_ID::int32 qps_sample_rate() const;
  void set_qps_sample_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_qps_sample_rate() const;
  void _internal_set_qps_sample_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 max_qps_second = 3 [default = -1];
  bool has_max_qps_second() const;
  private:
  bool _internal_has_max_qps_second() const;
  public:
  void clear_max_qps_second();
  ::PROTOBUF_NAMESPACE_ID::int32 max_qps_second() const;
  void set_max_qps_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_qps_second() const;
  void _internal_set_max_qps_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 runtime = 4 [default = 10];
  bool has_runtime() const;
  private:
  bool _internal_has_runtime() const;
  public:
  void clear_runtime();
  ::PROTOBUF_NAMESPACE_ID::int32 runtime() const;
  void set_runtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_runtime() const;
  void _internal_set_runtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 op_count = 6 [default = 10000];
  bool has_op_count() const;
  private:
  bool _internal_has_op_count() const;
  public:
  void clear_op_count();
  ::PROTOBUF_NAMESPACE_ID::int32 op_count() const;
  void set_op_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_op_count() const;
  void _internal_set_op_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 contains = 7 [default = 80];
  bool has_contains() const;
  private:
  bool _internal_has_contains() const;
  public:
  void clear_contains();
  ::PROTOBUF_NAMESPACE_ID::int32 contains() const;
  void set_contains(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contains() const;
  void _internal_set_contains(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 insert = 8 [default = 10];
  bool has_insert() const;
  private:
  bool _internal_has_insert() const;
  public:
  void clear_insert();
  ::PROTOBUF_NAMESPACE_ID::int32 insert() const;
  void set_insert(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_insert() const;
  void _internal_set_insert(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 remove = 9 [default = 10];
  bool has_remove() const;
  private:
  bool _internal_has_remove() const;
  public:
  void clear_remove();
  ::PROTOBUF_NAMESPACE_ID::int32 remove() const;
  void set_remove(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remove() const;
  void _internal_set_remove(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 key_ub = 11 [default = 1000000];
  bool has_key_ub() const;
  private:
  bool _internal_has_key_ub() const;
  public:
  void clear_key_ub();
  ::PROTOBUF_NAMESPACE_ID::int32 key_ub() const;
  void set_key_ub(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key_ub() const;
  void _internal_set_key_ub(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 region_size = 12 [default = 22];
  bool has_region_size() const;
  private:
  bool _internal_has_region_size() const;
  public:
  void clear_region_size();
  ::PROTOBUF_NAMESPACE_ID::int32 region_size() const;
  void set_region_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_region_size() const;
  void _internal_set_region_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 thread_count = 13 [default = 1];
  bool has_thread_count() const;
  private:
  bool _internal_has_thread_count() const;
  public:
  void clear_thread_count();
  ::PROTOBUF_NAMESPACE_ID::int32 thread_count() const;
  void set_thread_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_thread_count() const;
  void _internal_set_thread_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 qp_max = 15 [default = 30];
  bool has_qp_max() const;
  private:
  bool _internal_has_qp_max() const;
  public:
  void clear_qp_max();
  ::PROTOBUF_NAMESPACE_ID::int32 qp_max() const;
  void set_qp_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_qp_max() const;
  void _internal_set_qp_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 node_id = 16 [default = -1];
  bool has_node_id() const;
  private:
  bool _internal_has_node_id() const;
  public:
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::int32 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ExperimentParams)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool unlimited_stream_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_lb_;
  ::PROTOBUF_NAMESPACE_ID::int32 node_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 qps_sample_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_qps_second_;
  ::PROTOBUF_NAMESPACE_ID::int32 runtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 op_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 contains_;
  ::PROTOBUF_NAMESPACE_ID::int32 insert_;
  ::PROTOBUF_NAMESPACE_ID::int32 remove_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_ub_;
  ::PROTOBUF_NAMESPACE_ID::int32 region_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 thread_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 qp_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 node_id_;
  friend struct ::TableStruct_experiment_2eproto;
};
// -------------------------------------------------------------------

class ResultProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResultProto) */ {
 public:
  inline ResultProto() : ResultProto(nullptr) {};
  virtual ~ResultProto();

  ResultProto(const ResultProto& from);
  ResultProto(ResultProto&& from) noexcept
    : ResultProto() {
    *this = ::std::move(from);
  }

  inline ResultProto& operator=(const ResultProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultProto& operator=(ResultProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultProto* internal_default_instance() {
    return reinterpret_cast<const ResultProto*>(
               &_ResultProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResultProto& a, ResultProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultProto* New() const final {
    return CreateMaybeMessage<ResultProto>(nullptr);
  }

  ResultProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultProto& from);
  void MergeFrom(const ResultProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResultProto";
  }
  protected:
  explicit ResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_experiment_2eproto);
    return ::descriptor_table_experiment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverFieldNumber = 2,
    kParamsFieldNumber = 1,
  };
  // repeated .rome.WorkloadDriverProto driver = 2;
  int driver_size() const;
  private:
  int _internal_driver_size() const;
  public:
  void clear_driver();
  ::rome::WorkloadDriverProto* mutable_driver(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rome::WorkloadDriverProto >*
      mutable_driver();
  private:
  const ::rome::WorkloadDriverProto& _internal_driver(int index) const;
  ::rome::WorkloadDriverProto* _internal_add_driver();
  public:
  const ::rome::WorkloadDriverProto& driver(int index) const;
  ::rome::WorkloadDriverProto* add_driver();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rome::WorkloadDriverProto >&
      driver() const;

  // optional .ExperimentParams params = 1;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::ExperimentParams& params() const;
  ::ExperimentParams* release_params();
  ::ExperimentParams* mutable_params();
  void set_allocated_params(::ExperimentParams* params);
  private:
  const ::ExperimentParams& _internal_params() const;
  ::ExperimentParams* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::ExperimentParams* params);
  ::ExperimentParams* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:ResultProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rome::WorkloadDriverProto > driver_;
  ::ExperimentParams* params_;
  friend struct ::TableStruct_experiment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AckProto

// -------------------------------------------------------------------

// ExperimentParams

// required int32 qps_sample_rate = 2 [default = 10];
inline bool ExperimentParams::_internal_has_qps_sample_rate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ExperimentParams::has_qps_sample_rate() const {
  return _internal_has_qps_sample_rate();
}
inline void ExperimentParams::clear_qps_sample_rate() {
  qps_sample_rate_ = 10;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::_internal_qps_sample_rate() const {
  return qps_sample_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::qps_sample_rate() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.qps_sample_rate)
  return _internal_qps_sample_rate();
}
inline void ExperimentParams::_internal_set_qps_sample_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  qps_sample_rate_ = value;
}
inline void ExperimentParams::set_qps_sample_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_qps_sample_rate(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.qps_sample_rate)
}

// required int32 max_qps_second = 3 [default = -1];
inline bool ExperimentParams::_internal_has_max_qps_second() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ExperimentParams::has_max_qps_second() const {
  return _internal_has_max_qps_second();
}
inline void ExperimentParams::clear_max_qps_second() {
  max_qps_second_ = -1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::_internal_max_qps_second() const {
  return max_qps_second_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::max_qps_second() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.max_qps_second)
  return _internal_max_qps_second();
}
inline void ExperimentParams::_internal_set_max_qps_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  max_qps_second_ = value;
}
inline void ExperimentParams::set_max_qps_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_qps_second(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.max_qps_second)
}

// required int32 runtime = 4 [default = 10];
inline bool ExperimentParams::_internal_has_runtime() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ExperimentParams::has_runtime() const {
  return _internal_has_runtime();
}
inline void ExperimentParams::clear_runtime() {
  runtime_ = 10;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::_internal_runtime() const {
  return runtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::runtime() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.runtime)
  return _internal_runtime();
}
inline void ExperimentParams::_internal_set_runtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  runtime_ = value;
}
inline void ExperimentParams::set_runtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_runtime(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.runtime)
}

// required bool unlimited_stream = 5 [default = false];
inline bool ExperimentParams::_internal_has_unlimited_stream() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExperimentParams::has_unlimited_stream() const {
  return _internal_has_unlimited_stream();
}
inline void ExperimentParams::clear_unlimited_stream() {
  unlimited_stream_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ExperimentParams::_internal_unlimited_stream() const {
  return unlimited_stream_;
}
inline bool ExperimentParams::unlimited_stream() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.unlimited_stream)
  return _internal_unlimited_stream();
}
inline void ExperimentParams::_internal_set_unlimited_stream(bool value) {
  _has_bits_[0] |= 0x00000001u;
  unlimited_stream_ = value;
}
inline void ExperimentParams::set_unlimited_stream(bool value) {
  _internal_set_unlimited_stream(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.unlimited_stream)
}

// required int32 op_count = 6 [default = 10000];
inline bool ExperimentParams::_internal_has_op_count() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ExperimentParams::has_op_count() const {
  return _internal_has_op_count();
}
inline void ExperimentParams::clear_op_count() {
  op_count_ = 10000;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::_internal_op_count() const {
  return op_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::op_count() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.op_count)
  return _internal_op_count();
}
inline void ExperimentParams::_internal_set_op_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  op_count_ = value;
}
inline void ExperimentParams::set_op_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_op_count(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.op_count)
}

// required int32 contains = 7 [default = 80];
inline bool ExperimentParams::_internal_has_contains() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ExperimentParams::has_contains() const {
  return _internal_has_contains();
}
inline void ExperimentParams::clear_contains() {
  contains_ = 80;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::_internal_contains() const {
  return contains_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::contains() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.contains)
  return _internal_contains();
}
inline void ExperimentParams::_internal_set_contains(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  contains_ = value;
}
inline void ExperimentParams::set_contains(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contains(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.contains)
}

// required int32 insert = 8 [default = 10];
inline bool ExperimentParams::_internal_has_insert() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ExperimentParams::has_insert() const {
  return _internal_has_insert();
}
inline void ExperimentParams::clear_insert() {
  insert_ = 10;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::_internal_insert() const {
  return insert_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::insert() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.insert)
  return _internal_insert();
}
inline void ExperimentParams::_internal_set_insert(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  insert_ = value;
}
inline void ExperimentParams::set_insert(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_insert(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.insert)
}

// required int32 remove = 9 [default = 10];
inline bool ExperimentParams::_internal_has_remove() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ExperimentParams::has_remove() const {
  return _internal_has_remove();
}
inline void ExperimentParams::clear_remove() {
  remove_ = 10;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::_internal_remove() const {
  return remove_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::remove() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.remove)
  return _internal_remove();
}
inline void ExperimentParams::_internal_set_remove(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  remove_ = value;
}
inline void ExperimentParams::set_remove(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remove(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.remove)
}

// required int32 key_lb = 10 [default = 0];
inline bool ExperimentParams::_internal_has_key_lb() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExperimentParams::has_key_lb() const {
  return _internal_has_key_lb();
}
inline void ExperimentParams::clear_key_lb() {
  key_lb_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::_internal_key_lb() const {
  return key_lb_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::key_lb() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.key_lb)
  return _internal_key_lb();
}
inline void ExperimentParams::_internal_set_key_lb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  key_lb_ = value;
}
inline void ExperimentParams::set_key_lb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key_lb(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.key_lb)
}

// required int32 key_ub = 11 [default = 1000000];
inline bool ExperimentParams::_internal_has_key_ub() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ExperimentParams::has_key_ub() const {
  return _internal_has_key_ub();
}
inline void ExperimentParams::clear_key_ub() {
  key_ub_ = 1000000;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::_internal_key_ub() const {
  return key_ub_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::key_ub() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.key_ub)
  return _internal_key_ub();
}
inline void ExperimentParams::_internal_set_key_ub(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  key_ub_ = value;
}
inline void ExperimentParams::set_key_ub(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key_ub(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.key_ub)
}

// required int32 region_size = 12 [default = 22];
inline bool ExperimentParams::_internal_has_region_size() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ExperimentParams::has_region_size() const {
  return _internal_has_region_size();
}
inline void ExperimentParams::clear_region_size() {
  region_size_ = 22;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::_internal_region_size() const {
  return region_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::region_size() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.region_size)
  return _internal_region_size();
}
inline void ExperimentParams::_internal_set_region_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  region_size_ = value;
}
inline void ExperimentParams::set_region_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_region_size(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.region_size)
}

// required int32 thread_count = 13 [default = 1];
inline bool ExperimentParams::_internal_has_thread_count() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ExperimentParams::has_thread_count() const {
  return _internal_has_thread_count();
}
inline void ExperimentParams::clear_thread_count() {
  thread_count_ = 1;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::_internal_thread_count() const {
  return thread_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::thread_count() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.thread_count)
  return _internal_thread_count();
}
inline void ExperimentParams::_internal_set_thread_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  thread_count_ = value;
}
inline void ExperimentParams::set_thread_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_thread_count(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.thread_count)
}

// required int32 node_count = 14 [default = 0];
inline bool ExperimentParams::_internal_has_node_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ExperimentParams::has_node_count() const {
  return _internal_has_node_count();
}
inline void ExperimentParams::clear_node_count() {
  node_count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::_internal_node_count() const {
  return node_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::node_count() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.node_count)
  return _internal_node_count();
}
inline void ExperimentParams::_internal_set_node_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  node_count_ = value;
}
inline void ExperimentParams::set_node_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_node_count(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.node_count)
}

// required int32 qp_max = 15 [default = 30];
inline bool ExperimentParams::_internal_has_qp_max() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ExperimentParams::has_qp_max() const {
  return _internal_has_qp_max();
}
inline void ExperimentParams::clear_qp_max() {
  qp_max_ = 30;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::_internal_qp_max() const {
  return qp_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::qp_max() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.qp_max)
  return _internal_qp_max();
}
inline void ExperimentParams::_internal_set_qp_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  qp_max_ = value;
}
inline void ExperimentParams::set_qp_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_qp_max(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.qp_max)
}

// required int32 node_id = 16 [default = -1];
inline bool ExperimentParams::_internal_has_node_id() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ExperimentParams::has_node_id() const {
  return _internal_has_node_id();
}
inline void ExperimentParams::clear_node_id() {
  node_id_ = -1;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExperimentParams::node_id() const {
  // @@protoc_insertion_point(field_get:ExperimentParams.node_id)
  return _internal_node_id();
}
inline void ExperimentParams::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  node_id_ = value;
}
inline void ExperimentParams::set_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:ExperimentParams.node_id)
}

// -------------------------------------------------------------------

// ResultProto

// optional .ExperimentParams params = 1;
inline bool ResultProto::_internal_has_params() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || params_ != nullptr);
  return value;
}
inline bool ResultProto::has_params() const {
  return _internal_has_params();
}
inline void ResultProto::clear_params() {
  if (params_ != nullptr) params_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ExperimentParams& ResultProto::_internal_params() const {
  const ::ExperimentParams* p = params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ExperimentParams*>(
      &::_ExperimentParams_default_instance_);
}
inline const ::ExperimentParams& ResultProto::params() const {
  // @@protoc_insertion_point(field_get:ResultProto.params)
  return _internal_params();
}
inline void ResultProto::unsafe_arena_set_allocated_params(
    ::ExperimentParams* params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  params_ = params;
  if (params) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ResultProto.params)
}
inline ::ExperimentParams* ResultProto::release_params() {
  auto temp = unsafe_arena_release_params();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ExperimentParams* ResultProto::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:ResultProto.params)
  _has_bits_[0] &= ~0x00000001u;
  ::ExperimentParams* temp = params_;
  params_ = nullptr;
  return temp;
}
inline ::ExperimentParams* ResultProto::_internal_mutable_params() {
  _has_bits_[0] |= 0x00000001u;
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<::ExperimentParams>(GetArena());
    params_ = p;
  }
  return params_;
}
inline ::ExperimentParams* ResultProto::mutable_params() {
  // @@protoc_insertion_point(field_mutable:ResultProto.params)
  return _internal_mutable_params();
}
inline void ResultProto::set_allocated_params(::ExperimentParams* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:ResultProto.params)
}

// repeated .rome.WorkloadDriverProto driver = 2;
inline int ResultProto::_internal_driver_size() const {
  return driver_.size();
}
inline int ResultProto::driver_size() const {
  return _internal_driver_size();
}
inline ::rome::WorkloadDriverProto* ResultProto::mutable_driver(int index) {
  // @@protoc_insertion_point(field_mutable:ResultProto.driver)
  return driver_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rome::WorkloadDriverProto >*
ResultProto::mutable_driver() {
  // @@protoc_insertion_point(field_mutable_list:ResultProto.driver)
  return &driver_;
}
inline const ::rome::WorkloadDriverProto& ResultProto::_internal_driver(int index) const {
  return driver_.Get(index);
}
inline const ::rome::WorkloadDriverProto& ResultProto::driver(int index) const {
  // @@protoc_insertion_point(field_get:ResultProto.driver)
  return _internal_driver(index);
}
inline ::rome::WorkloadDriverProto* ResultProto::_internal_add_driver() {
  return driver_.Add();
}
inline ::rome::WorkloadDriverProto* ResultProto::add_driver() {
  // @@protoc_insertion_point(field_add:ResultProto.driver)
  return _internal_add_driver();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rome::WorkloadDriverProto >&
ResultProto::driver() const {
  // @@protoc_insertion_point(field_list:ResultProto.driver)
  return driver_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_experiment_2eproto
