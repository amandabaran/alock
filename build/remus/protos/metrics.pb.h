// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metrics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_metrics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_metrics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_metrics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_metrics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_metrics_2eproto;
namespace rome {
namespace metrics {
class CounterProto;
class CounterProtoDefaultTypeInternal;
extern CounterProtoDefaultTypeInternal _CounterProto_default_instance_;
class MetricProto;
class MetricProtoDefaultTypeInternal;
extern MetricProtoDefaultTypeInternal _MetricProto_default_instance_;
class StopwatchProto;
class StopwatchProtoDefaultTypeInternal;
extern StopwatchProtoDefaultTypeInternal _StopwatchProto_default_instance_;
class SummaryProto;
class SummaryProtoDefaultTypeInternal;
extern SummaryProtoDefaultTypeInternal _SummaryProto_default_instance_;
}  // namespace metrics
}  // namespace rome
PROTOBUF_NAMESPACE_OPEN
template<> ::rome::metrics::CounterProto* Arena::CreateMaybeMessage<::rome::metrics::CounterProto>(Arena*);
template<> ::rome::metrics::MetricProto* Arena::CreateMaybeMessage<::rome::metrics::MetricProto>(Arena*);
template<> ::rome::metrics::StopwatchProto* Arena::CreateMaybeMessage<::rome::metrics::StopwatchProto>(Arena*);
template<> ::rome::metrics::SummaryProto* Arena::CreateMaybeMessage<::rome::metrics::SummaryProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rome {
namespace metrics {

// ===================================================================

class MetricProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rome.metrics.MetricProto) */ {
 public:
  inline MetricProto() : MetricProto(nullptr) {};
  virtual ~MetricProto();

  MetricProto(const MetricProto& from);
  MetricProto(MetricProto&& from) noexcept
    : MetricProto() {
    *this = ::std::move(from);
  }

  inline MetricProto& operator=(const MetricProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricProto& operator=(MetricProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetricProto& default_instance();

  enum MetricCase {
    kCounter = 2,
    kStopwatch = 3,
    kSummary = 4,
    METRIC_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetricProto* internal_default_instance() {
    return reinterpret_cast<const MetricProto*>(
               &_MetricProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MetricProto& a, MetricProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetricProto* New() const final {
    return CreateMaybeMessage<MetricProto>(nullptr);
  }

  MetricProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetricProto& from);
  void MergeFrom(const MetricProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rome.metrics.MetricProto";
  }
  protected:
  explicit MetricProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_metrics_2eproto);
    return ::descriptor_table_metrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCounterFieldNumber = 2,
    kStopwatchFieldNumber = 3,
    kSummaryFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .rome.metrics.CounterProto counter = 2;
  bool has_counter() const;
  private:
  bool _internal_has_counter() const;
  public:
  void clear_counter();
  const ::rome::metrics::CounterProto& counter() const;
  ::rome::metrics::CounterProto* release_counter();
  ::rome::metrics::CounterProto* mutable_counter();
  void set_allocated_counter(::rome::metrics::CounterProto* counter);
  private:
  const ::rome::metrics::CounterProto& _internal_counter() const;
  ::rome::metrics::CounterProto* _internal_mutable_counter();
  public:
  void unsafe_arena_set_allocated_counter(
      ::rome::metrics::CounterProto* counter);
  ::rome::metrics::CounterProto* unsafe_arena_release_counter();

  // .rome.metrics.StopwatchProto stopwatch = 3;
  bool has_stopwatch() const;
  private:
  bool _internal_has_stopwatch() const;
  public:
  void clear_stopwatch();
  const ::rome::metrics::StopwatchProto& stopwatch() const;
  ::rome::metrics::StopwatchProto* release_stopwatch();
  ::rome::metrics::StopwatchProto* mutable_stopwatch();
  void set_allocated_stopwatch(::rome::metrics::StopwatchProto* stopwatch);
  private:
  const ::rome::metrics::StopwatchProto& _internal_stopwatch() const;
  ::rome::metrics::StopwatchProto* _internal_mutable_stopwatch();
  public:
  void unsafe_arena_set_allocated_stopwatch(
      ::rome::metrics::StopwatchProto* stopwatch);
  ::rome::metrics::StopwatchProto* unsafe_arena_release_stopwatch();

  // .rome.metrics.SummaryProto summary = 4;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;
  public:
  void clear_summary();
  const ::rome::metrics::SummaryProto& summary() const;
  ::rome::metrics::SummaryProto* release_summary();
  ::rome::metrics::SummaryProto* mutable_summary();
  void set_allocated_summary(::rome::metrics::SummaryProto* summary);
  private:
  const ::rome::metrics::SummaryProto& _internal_summary() const;
  ::rome::metrics::SummaryProto* _internal_mutable_summary();
  public:
  void unsafe_arena_set_allocated_summary(
      ::rome::metrics::SummaryProto* summary);
  ::rome::metrics::SummaryProto* unsafe_arena_release_summary();

  void clear_metric();
  MetricCase metric_case() const;
  // @@protoc_insertion_point(class_scope:rome.metrics.MetricProto)
 private:
  class _Internal;
  void set_has_counter();
  void set_has_stopwatch();
  void set_has_summary();

  inline bool has_metric() const;
  inline void clear_has_metric();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  union MetricUnion {
    MetricUnion() {}
    ::rome::metrics::CounterProto* counter_;
    ::rome::metrics::StopwatchProto* stopwatch_;
    ::rome::metrics::SummaryProto* summary_;
  } metric_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class CounterProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rome.metrics.CounterProto) */ {
 public:
  inline CounterProto() : CounterProto(nullptr) {};
  virtual ~CounterProto();

  CounterProto(const CounterProto& from);
  CounterProto(CounterProto&& from) noexcept
    : CounterProto() {
    *this = ::std::move(from);
  }

  inline CounterProto& operator=(const CounterProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CounterProto& operator=(CounterProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CounterProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CounterProto* internal_default_instance() {
    return reinterpret_cast<const CounterProto*>(
               &_CounterProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CounterProto& a, CounterProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CounterProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CounterProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CounterProto* New() const final {
    return CreateMaybeMessage<CounterProto>(nullptr);
  }

  CounterProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CounterProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CounterProto& from);
  void MergeFrom(const CounterProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CounterProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rome.metrics.CounterProto";
  }
  protected:
  explicit CounterProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_metrics_2eproto);
    return ::descriptor_table_metrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // optional uint64 count = 1;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:rome.metrics.CounterProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class StopwatchProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rome.metrics.StopwatchProto) */ {
 public:
  inline StopwatchProto() : StopwatchProto(nullptr) {};
  virtual ~StopwatchProto();

  StopwatchProto(const StopwatchProto& from);
  StopwatchProto(StopwatchProto&& from) noexcept
    : StopwatchProto() {
    *this = ::std::move(from);
  }

  inline StopwatchProto& operator=(const StopwatchProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopwatchProto& operator=(StopwatchProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopwatchProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopwatchProto* internal_default_instance() {
    return reinterpret_cast<const StopwatchProto*>(
               &_StopwatchProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StopwatchProto& a, StopwatchProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StopwatchProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopwatchProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopwatchProto* New() const final {
    return CreateMaybeMessage<StopwatchProto>(nullptr);
  }

  StopwatchProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopwatchProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopwatchProto& from);
  void MergeFrom(const StopwatchProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopwatchProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rome.metrics.StopwatchProto";
  }
  protected:
  explicit StopwatchProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_metrics_2eproto);
    return ::descriptor_table_metrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuntimeNsFieldNumber = 1,
  };
  // optional uint64 runtime_ns = 1;
  bool has_runtime_ns() const;
  private:
  bool _internal_has_runtime_ns() const;
  public:
  void clear_runtime_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 runtime_ns() const;
  void set_runtime_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_runtime_ns() const;
  void _internal_set_runtime_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:rome.metrics.StopwatchProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 runtime_ns_;
  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class SummaryProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rome.metrics.SummaryProto) */ {
 public:
  inline SummaryProto() : SummaryProto(nullptr) {};
  virtual ~SummaryProto();

  SummaryProto(const SummaryProto& from);
  SummaryProto(SummaryProto&& from) noexcept
    : SummaryProto() {
    *this = ::std::move(from);
  }

  inline SummaryProto& operator=(const SummaryProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryProto& operator=(SummaryProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SummaryProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SummaryProto* internal_default_instance() {
    return reinterpret_cast<const SummaryProto*>(
               &_SummaryProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SummaryProto& a, SummaryProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SummaryProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SummaryProto* New() const final {
    return CreateMaybeMessage<SummaryProto>(nullptr);
  }

  SummaryProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SummaryProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SummaryProto& from);
  void MergeFrom(const SummaryProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rome.metrics.SummaryProto";
  }
  protected:
  explicit SummaryProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_metrics_2eproto);
    return ::descriptor_table_metrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitsFieldNumber = 1,
    kMeanFieldNumber = 2,
    kStddevFieldNumber = 3,
    kMinFieldNumber = 4,
    kP50FieldNumber = 6,
    kP90FieldNumber = 7,
    kP95FieldNumber = 8,
    kP99FieldNumber = 9,
    kP999FieldNumber = 10,
    kMaxFieldNumber = 11,
    kCountFieldNumber = 12,
  };
  // optional string units = 1;
  bool has_units() const;
  private:
  bool _internal_has_units() const;
  public:
  void clear_units();
  const std::string& units() const;
  void set_units(const std::string& value);
  void set_units(std::string&& value);
  void set_units(const char* value);
  void set_units(const char* value, size_t size);
  std::string* mutable_units();
  std::string* release_units();
  void set_allocated_units(std::string* units);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_units();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_units(
      std::string* units);
  private:
  const std::string& _internal_units() const;
  void _internal_set_units(const std::string& value);
  std::string* _internal_mutable_units();
  public:

  // optional double mean = 2;
  bool has_mean() const;
  private:
  bool _internal_has_mean() const;
  public:
  void clear_mean();
  double mean() const;
  void set_mean(double value);
  private:
  double _internal_mean() const;
  void _internal_set_mean(double value);
  public:

  // optional double stddev = 3;
  bool has_stddev() const;
  private:
  bool _internal_has_stddev() const;
  public:
  void clear_stddev();
  double stddev() const;
  void set_stddev(double value);
  private:
  double _internal_stddev() const;
  void _internal_set_stddev(double value);
  public:

  // optional double min = 4;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  double min() const;
  void set_min(double value);
  private:
  double _internal_min() const;
  void _internal_set_min(double value);
  public:

  // optional double p50 = 6;
  bool has_p50() const;
  private:
  bool _internal_has_p50() const;
  public:
  void clear_p50();
  double p50() const;
  void set_p50(double value);
  private:
  double _internal_p50() const;
  void _internal_set_p50(double value);
  public:

  // optional double p90 = 7;
  bool has_p90() const;
  private:
  bool _internal_has_p90() const;
  public:
  void clear_p90();
  double p90() const;
  void set_p90(double value);
  private:
  double _internal_p90() const;
  void _internal_set_p90(double value);
  public:

  // optional double p95 = 8;
  bool has_p95() const;
  private:
  bool _internal_has_p95() const;
  public:
  void clear_p95();
  double p95() const;
  void set_p95(double value);
  private:
  double _internal_p95() const;
  void _internal_set_p95(double value);
  public:

  // optional double p99 = 9;
  bool has_p99() const;
  private:
  bool _internal_has_p99() const;
  public:
  void clear_p99();
  double p99() const;
  void set_p99(double value);
  private:
  double _internal_p99() const;
  void _internal_set_p99(double value);
  public:

  // optional double p999 = 10;
  bool has_p999() const;
  private:
  bool _internal_has_p999() const;
  public:
  void clear_p999();
  double p999() const;
  void set_p999(double value);
  private:
  double _internal_p999() const;
  void _internal_set_p999(double value);
  public:

  // optional double max = 11;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  double max() const;
  void set_max(double value);
  private:
  double _internal_max() const;
  void _internal_set_max(double value);
  public:

  // optional uint64 count = 12;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:rome.metrics.SummaryProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr units_;
  double mean_;
  double stddev_;
  double min_;
  double p50_;
  double p90_;
  double p95_;
  double p99_;
  double p999_;
  double max_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  friend struct ::TableStruct_metrics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MetricProto

// optional string name = 1;
inline bool MetricProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MetricProto::has_name() const {
  return _internal_has_name();
}
inline void MetricProto::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MetricProto::name() const {
  // @@protoc_insertion_point(field_get:rome.metrics.MetricProto.name)
  return _internal_name();
}
inline void MetricProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:rome.metrics.MetricProto.name)
}
inline std::string* MetricProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:rome.metrics.MetricProto.name)
  return _internal_mutable_name();
}
inline const std::string& MetricProto::_internal_name() const {
  return name_.Get();
}
inline void MetricProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MetricProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rome.metrics.MetricProto.name)
}
inline void MetricProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rome.metrics.MetricProto.name)
}
inline void MetricProto::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rome.metrics.MetricProto.name)
}
inline std::string* MetricProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MetricProto::release_name() {
  // @@protoc_insertion_point(field_release:rome.metrics.MetricProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MetricProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rome.metrics.MetricProto.name)
}
inline std::string* MetricProto::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rome.metrics.MetricProto.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MetricProto::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rome.metrics.MetricProto.name)
}

// .rome.metrics.CounterProto counter = 2;
inline bool MetricProto::_internal_has_counter() const {
  return metric_case() == kCounter;
}
inline bool MetricProto::has_counter() const {
  return _internal_has_counter();
}
inline void MetricProto::set_has_counter() {
  _oneof_case_[0] = kCounter;
}
inline void MetricProto::clear_counter() {
  if (_internal_has_counter()) {
    if (GetArena() == nullptr) {
      delete metric_.counter_;
    }
    clear_has_metric();
  }
}
inline ::rome::metrics::CounterProto* MetricProto::release_counter() {
  // @@protoc_insertion_point(field_release:rome.metrics.MetricProto.counter)
  if (_internal_has_counter()) {
    clear_has_metric();
      ::rome::metrics::CounterProto* temp = metric_.counter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    metric_.counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rome::metrics::CounterProto& MetricProto::_internal_counter() const {
  return _internal_has_counter()
      ? *metric_.counter_
      : *reinterpret_cast< ::rome::metrics::CounterProto*>(&::rome::metrics::_CounterProto_default_instance_);
}
inline const ::rome::metrics::CounterProto& MetricProto::counter() const {
  // @@protoc_insertion_point(field_get:rome.metrics.MetricProto.counter)
  return _internal_counter();
}
inline ::rome::metrics::CounterProto* MetricProto::unsafe_arena_release_counter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rome.metrics.MetricProto.counter)
  if (_internal_has_counter()) {
    clear_has_metric();
    ::rome::metrics::CounterProto* temp = metric_.counter_;
    metric_.counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MetricProto::unsafe_arena_set_allocated_counter(::rome::metrics::CounterProto* counter) {
  clear_metric();
  if (counter) {
    set_has_counter();
    metric_.counter_ = counter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rome.metrics.MetricProto.counter)
}
inline ::rome::metrics::CounterProto* MetricProto::_internal_mutable_counter() {
  if (!_internal_has_counter()) {
    clear_metric();
    set_has_counter();
    metric_.counter_ = CreateMaybeMessage< ::rome::metrics::CounterProto >(GetArena());
  }
  return metric_.counter_;
}
inline ::rome::metrics::CounterProto* MetricProto::mutable_counter() {
  // @@protoc_insertion_point(field_mutable:rome.metrics.MetricProto.counter)
  return _internal_mutable_counter();
}

// .rome.metrics.StopwatchProto stopwatch = 3;
inline bool MetricProto::_internal_has_stopwatch() const {
  return metric_case() == kStopwatch;
}
inline bool MetricProto::has_stopwatch() const {
  return _internal_has_stopwatch();
}
inline void MetricProto::set_has_stopwatch() {
  _oneof_case_[0] = kStopwatch;
}
inline void MetricProto::clear_stopwatch() {
  if (_internal_has_stopwatch()) {
    if (GetArena() == nullptr) {
      delete metric_.stopwatch_;
    }
    clear_has_metric();
  }
}
inline ::rome::metrics::StopwatchProto* MetricProto::release_stopwatch() {
  // @@protoc_insertion_point(field_release:rome.metrics.MetricProto.stopwatch)
  if (_internal_has_stopwatch()) {
    clear_has_metric();
      ::rome::metrics::StopwatchProto* temp = metric_.stopwatch_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    metric_.stopwatch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rome::metrics::StopwatchProto& MetricProto::_internal_stopwatch() const {
  return _internal_has_stopwatch()
      ? *metric_.stopwatch_
      : *reinterpret_cast< ::rome::metrics::StopwatchProto*>(&::rome::metrics::_StopwatchProto_default_instance_);
}
inline const ::rome::metrics::StopwatchProto& MetricProto::stopwatch() const {
  // @@protoc_insertion_point(field_get:rome.metrics.MetricProto.stopwatch)
  return _internal_stopwatch();
}
inline ::rome::metrics::StopwatchProto* MetricProto::unsafe_arena_release_stopwatch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rome.metrics.MetricProto.stopwatch)
  if (_internal_has_stopwatch()) {
    clear_has_metric();
    ::rome::metrics::StopwatchProto* temp = metric_.stopwatch_;
    metric_.stopwatch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MetricProto::unsafe_arena_set_allocated_stopwatch(::rome::metrics::StopwatchProto* stopwatch) {
  clear_metric();
  if (stopwatch) {
    set_has_stopwatch();
    metric_.stopwatch_ = stopwatch;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rome.metrics.MetricProto.stopwatch)
}
inline ::rome::metrics::StopwatchProto* MetricProto::_internal_mutable_stopwatch() {
  if (!_internal_has_stopwatch()) {
    clear_metric();
    set_has_stopwatch();
    metric_.stopwatch_ = CreateMaybeMessage< ::rome::metrics::StopwatchProto >(GetArena());
  }
  return metric_.stopwatch_;
}
inline ::rome::metrics::StopwatchProto* MetricProto::mutable_stopwatch() {
  // @@protoc_insertion_point(field_mutable:rome.metrics.MetricProto.stopwatch)
  return _internal_mutable_stopwatch();
}

// .rome.metrics.SummaryProto summary = 4;
inline bool MetricProto::_internal_has_summary() const {
  return metric_case() == kSummary;
}
inline bool MetricProto::has_summary() const {
  return _internal_has_summary();
}
inline void MetricProto::set_has_summary() {
  _oneof_case_[0] = kSummary;
}
inline void MetricProto::clear_summary() {
  if (_internal_has_summary()) {
    if (GetArena() == nullptr) {
      delete metric_.summary_;
    }
    clear_has_metric();
  }
}
inline ::rome::metrics::SummaryProto* MetricProto::release_summary() {
  // @@protoc_insertion_point(field_release:rome.metrics.MetricProto.summary)
  if (_internal_has_summary()) {
    clear_has_metric();
      ::rome::metrics::SummaryProto* temp = metric_.summary_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    metric_.summary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rome::metrics::SummaryProto& MetricProto::_internal_summary() const {
  return _internal_has_summary()
      ? *metric_.summary_
      : *reinterpret_cast< ::rome::metrics::SummaryProto*>(&::rome::metrics::_SummaryProto_default_instance_);
}
inline const ::rome::metrics::SummaryProto& MetricProto::summary() const {
  // @@protoc_insertion_point(field_get:rome.metrics.MetricProto.summary)
  return _internal_summary();
}
inline ::rome::metrics::SummaryProto* MetricProto::unsafe_arena_release_summary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rome.metrics.MetricProto.summary)
  if (_internal_has_summary()) {
    clear_has_metric();
    ::rome::metrics::SummaryProto* temp = metric_.summary_;
    metric_.summary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MetricProto::unsafe_arena_set_allocated_summary(::rome::metrics::SummaryProto* summary) {
  clear_metric();
  if (summary) {
    set_has_summary();
    metric_.summary_ = summary;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rome.metrics.MetricProto.summary)
}
inline ::rome::metrics::SummaryProto* MetricProto::_internal_mutable_summary() {
  if (!_internal_has_summary()) {
    clear_metric();
    set_has_summary();
    metric_.summary_ = CreateMaybeMessage< ::rome::metrics::SummaryProto >(GetArena());
  }
  return metric_.summary_;
}
inline ::rome::metrics::SummaryProto* MetricProto::mutable_summary() {
  // @@protoc_insertion_point(field_mutable:rome.metrics.MetricProto.summary)
  return _internal_mutable_summary();
}

inline bool MetricProto::has_metric() const {
  return metric_case() != METRIC_NOT_SET;
}
inline void MetricProto::clear_has_metric() {
  _oneof_case_[0] = METRIC_NOT_SET;
}
inline MetricProto::MetricCase MetricProto::metric_case() const {
  return MetricProto::MetricCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CounterProto

// optional uint64 count = 1;
inline bool CounterProto::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CounterProto::has_count() const {
  return _internal_has_count();
}
inline void CounterProto::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CounterProto::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CounterProto::count() const {
  // @@protoc_insertion_point(field_get:rome.metrics.CounterProto.count)
  return _internal_count();
}
inline void CounterProto::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  count_ = value;
}
inline void CounterProto::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:rome.metrics.CounterProto.count)
}

// -------------------------------------------------------------------

// StopwatchProto

// optional uint64 runtime_ns = 1;
inline bool StopwatchProto::_internal_has_runtime_ns() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StopwatchProto::has_runtime_ns() const {
  return _internal_has_runtime_ns();
}
inline void StopwatchProto::clear_runtime_ns() {
  runtime_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StopwatchProto::_internal_runtime_ns() const {
  return runtime_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StopwatchProto::runtime_ns() const {
  // @@protoc_insertion_point(field_get:rome.metrics.StopwatchProto.runtime_ns)
  return _internal_runtime_ns();
}
inline void StopwatchProto::_internal_set_runtime_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  runtime_ns_ = value;
}
inline void StopwatchProto::set_runtime_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_runtime_ns(value);
  // @@protoc_insertion_point(field_set:rome.metrics.StopwatchProto.runtime_ns)
}

// -------------------------------------------------------------------

// SummaryProto

// optional string units = 1;
inline bool SummaryProto::_internal_has_units() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SummaryProto::has_units() const {
  return _internal_has_units();
}
inline void SummaryProto::clear_units() {
  units_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SummaryProto::units() const {
  // @@protoc_insertion_point(field_get:rome.metrics.SummaryProto.units)
  return _internal_units();
}
inline void SummaryProto::set_units(const std::string& value) {
  _internal_set_units(value);
  // @@protoc_insertion_point(field_set:rome.metrics.SummaryProto.units)
}
inline std::string* SummaryProto::mutable_units() {
  // @@protoc_insertion_point(field_mutable:rome.metrics.SummaryProto.units)
  return _internal_mutable_units();
}
inline const std::string& SummaryProto::_internal_units() const {
  return units_.Get();
}
inline void SummaryProto::_internal_set_units(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SummaryProto::set_units(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  units_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rome.metrics.SummaryProto.units)
}
inline void SummaryProto::set_units(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rome.metrics.SummaryProto.units)
}
inline void SummaryProto::set_units(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rome.metrics.SummaryProto.units)
}
inline std::string* SummaryProto::_internal_mutable_units() {
  _has_bits_[0] |= 0x00000001u;
  return units_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SummaryProto::release_units() {
  // @@protoc_insertion_point(field_release:rome.metrics.SummaryProto.units)
  if (!_internal_has_units()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return units_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SummaryProto::set_allocated_units(std::string* units) {
  if (units != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  units_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), units,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rome.metrics.SummaryProto.units)
}
inline std::string* SummaryProto::unsafe_arena_release_units() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rome.metrics.SummaryProto.units)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return units_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SummaryProto::unsafe_arena_set_allocated_units(
    std::string* units) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (units != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  units_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      units, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rome.metrics.SummaryProto.units)
}

// optional double mean = 2;
inline bool SummaryProto::_internal_has_mean() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SummaryProto::has_mean() const {
  return _internal_has_mean();
}
inline void SummaryProto::clear_mean() {
  mean_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double SummaryProto::_internal_mean() const {
  return mean_;
}
inline double SummaryProto::mean() const {
  // @@protoc_insertion_point(field_get:rome.metrics.SummaryProto.mean)
  return _internal_mean();
}
inline void SummaryProto::_internal_set_mean(double value) {
  _has_bits_[0] |= 0x00000002u;
  mean_ = value;
}
inline void SummaryProto::set_mean(double value) {
  _internal_set_mean(value);
  // @@protoc_insertion_point(field_set:rome.metrics.SummaryProto.mean)
}

// optional double stddev = 3;
inline bool SummaryProto::_internal_has_stddev() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SummaryProto::has_stddev() const {
  return _internal_has_stddev();
}
inline void SummaryProto::clear_stddev() {
  stddev_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SummaryProto::_internal_stddev() const {
  return stddev_;
}
inline double SummaryProto::stddev() const {
  // @@protoc_insertion_point(field_get:rome.metrics.SummaryProto.stddev)
  return _internal_stddev();
}
inline void SummaryProto::_internal_set_stddev(double value) {
  _has_bits_[0] |= 0x00000004u;
  stddev_ = value;
}
inline void SummaryProto::set_stddev(double value) {
  _internal_set_stddev(value);
  // @@protoc_insertion_point(field_set:rome.metrics.SummaryProto.stddev)
}

// optional double min = 4;
inline bool SummaryProto::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SummaryProto::has_min() const {
  return _internal_has_min();
}
inline void SummaryProto::clear_min() {
  min_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double SummaryProto::_internal_min() const {
  return min_;
}
inline double SummaryProto::min() const {
  // @@protoc_insertion_point(field_get:rome.metrics.SummaryProto.min)
  return _internal_min();
}
inline void SummaryProto::_internal_set_min(double value) {
  _has_bits_[0] |= 0x00000008u;
  min_ = value;
}
inline void SummaryProto::set_min(double value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:rome.metrics.SummaryProto.min)
}

// optional double p50 = 6;
inline bool SummaryProto::_internal_has_p50() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SummaryProto::has_p50() const {
  return _internal_has_p50();
}
inline void SummaryProto::clear_p50() {
  p50_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double SummaryProto::_internal_p50() const {
  return p50_;
}
inline double SummaryProto::p50() const {
  // @@protoc_insertion_point(field_get:rome.metrics.SummaryProto.p50)
  return _internal_p50();
}
inline void SummaryProto::_internal_set_p50(double value) {
  _has_bits_[0] |= 0x00000010u;
  p50_ = value;
}
inline void SummaryProto::set_p50(double value) {
  _internal_set_p50(value);
  // @@protoc_insertion_point(field_set:rome.metrics.SummaryProto.p50)
}

// optional double p90 = 7;
inline bool SummaryProto::_internal_has_p90() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SummaryProto::has_p90() const {
  return _internal_has_p90();
}
inline void SummaryProto::clear_p90() {
  p90_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double SummaryProto::_internal_p90() const {
  return p90_;
}
inline double SummaryProto::p90() const {
  // @@protoc_insertion_point(field_get:rome.metrics.SummaryProto.p90)
  return _internal_p90();
}
inline void SummaryProto::_internal_set_p90(double value) {
  _has_bits_[0] |= 0x00000020u;
  p90_ = value;
}
inline void SummaryProto::set_p90(double value) {
  _internal_set_p90(value);
  // @@protoc_insertion_point(field_set:rome.metrics.SummaryProto.p90)
}

// optional double p95 = 8;
inline bool SummaryProto::_internal_has_p95() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SummaryProto::has_p95() const {
  return _internal_has_p95();
}
inline void SummaryProto::clear_p95() {
  p95_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double SummaryProto::_internal_p95() const {
  return p95_;
}
inline double SummaryProto::p95() const {
  // @@protoc_insertion_point(field_get:rome.metrics.SummaryProto.p95)
  return _internal_p95();
}
inline void SummaryProto::_internal_set_p95(double value) {
  _has_bits_[0] |= 0x00000040u;
  p95_ = value;
}
inline void SummaryProto::set_p95(double value) {
  _internal_set_p95(value);
  // @@protoc_insertion_point(field_set:rome.metrics.SummaryProto.p95)
}

// optional double p99 = 9;
inline bool SummaryProto::_internal_has_p99() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SummaryProto::has_p99() const {
  return _internal_has_p99();
}
inline void SummaryProto::clear_p99() {
  p99_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double SummaryProto::_internal_p99() const {
  return p99_;
}
inline double SummaryProto::p99() const {
  // @@protoc_insertion_point(field_get:rome.metrics.SummaryProto.p99)
  return _internal_p99();
}
inline void SummaryProto::_internal_set_p99(double value) {
  _has_bits_[0] |= 0x00000080u;
  p99_ = value;
}
inline void SummaryProto::set_p99(double value) {
  _internal_set_p99(value);
  // @@protoc_insertion_point(field_set:rome.metrics.SummaryProto.p99)
}

// optional double p999 = 10;
inline bool SummaryProto::_internal_has_p999() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SummaryProto::has_p999() const {
  return _internal_has_p999();
}
inline void SummaryProto::clear_p999() {
  p999_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double SummaryProto::_internal_p999() const {
  return p999_;
}
inline double SummaryProto::p999() const {
  // @@protoc_insertion_point(field_get:rome.metrics.SummaryProto.p999)
  return _internal_p999();
}
inline void SummaryProto::_internal_set_p999(double value) {
  _has_bits_[0] |= 0x00000100u;
  p999_ = value;
}
inline void SummaryProto::set_p999(double value) {
  _internal_set_p999(value);
  // @@protoc_insertion_point(field_set:rome.metrics.SummaryProto.p999)
}

// optional double max = 11;
inline bool SummaryProto::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SummaryProto::has_max() const {
  return _internal_has_max();
}
inline void SummaryProto::clear_max() {
  max_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double SummaryProto::_internal_max() const {
  return max_;
}
inline double SummaryProto::max() const {
  // @@protoc_insertion_point(field_get:rome.metrics.SummaryProto.max)
  return _internal_max();
}
inline void SummaryProto::_internal_set_max(double value) {
  _has_bits_[0] |= 0x00000200u;
  max_ = value;
}
inline void SummaryProto::set_max(double value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:rome.metrics.SummaryProto.max)
}

// optional uint64 count = 12;
inline bool SummaryProto::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SummaryProto::has_count() const {
  return _internal_has_count();
}
inline void SummaryProto::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SummaryProto::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SummaryProto::count() const {
  // @@protoc_insertion_point(field_get:rome.metrics.SummaryProto.count)
  return _internal_count();
}
inline void SummaryProto::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  count_ = value;
}
inline void SummaryProto::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:rome.metrics.SummaryProto.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics
}  // namespace rome

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_metrics_2eproto
