// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metrics.proto

#include "metrics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_metrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CounterProto_metrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopwatchProto_metrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SummaryProto_metrics_2eproto;
namespace rome {
namespace metrics {
class MetricProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetricProto> _instance;
  const ::rome::metrics::CounterProto* counter_;
  const ::rome::metrics::StopwatchProto* stopwatch_;
  const ::rome::metrics::SummaryProto* summary_;
} _MetricProto_default_instance_;
class CounterProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CounterProto> _instance;
} _CounterProto_default_instance_;
class StopwatchProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopwatchProto> _instance;
} _StopwatchProto_default_instance_;
class SummaryProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SummaryProto> _instance;
} _SummaryProto_default_instance_;
}  // namespace metrics
}  // namespace rome
static void InitDefaultsscc_info_CounterProto_metrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rome::metrics::_CounterProto_default_instance_;
    new (ptr) ::rome::metrics::CounterProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rome::metrics::CounterProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CounterProto_metrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CounterProto_metrics_2eproto}, {}};

static void InitDefaultsscc_info_MetricProto_metrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rome::metrics::_MetricProto_default_instance_;
    new (ptr) ::rome::metrics::MetricProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rome::metrics::MetricProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MetricProto_metrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MetricProto_metrics_2eproto}, {
      &scc_info_CounterProto_metrics_2eproto.base,
      &scc_info_StopwatchProto_metrics_2eproto.base,
      &scc_info_SummaryProto_metrics_2eproto.base,}};

static void InitDefaultsscc_info_StopwatchProto_metrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rome::metrics::_StopwatchProto_default_instance_;
    new (ptr) ::rome::metrics::StopwatchProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rome::metrics::StopwatchProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopwatchProto_metrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopwatchProto_metrics_2eproto}, {}};

static void InitDefaultsscc_info_SummaryProto_metrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rome::metrics::_SummaryProto_default_instance_;
    new (ptr) ::rome::metrics::SummaryProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rome::metrics::SummaryProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SummaryProto_metrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SummaryProto_metrics_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_metrics_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_metrics_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_metrics_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_metrics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::rome::metrics::MetricProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rome::metrics::MetricProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::rome::metrics::MetricProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rome::metrics::MetricProto, name_),
  offsetof(::rome::metrics::MetricProtoDefaultTypeInternal, counter_),
  offsetof(::rome::metrics::MetricProtoDefaultTypeInternal, stopwatch_),
  offsetof(::rome::metrics::MetricProtoDefaultTypeInternal, summary_),
  PROTOBUF_FIELD_OFFSET(::rome::metrics::MetricProto, metric_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::rome::metrics::CounterProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rome::metrics::CounterProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rome::metrics::CounterProto, count_),
  0,
  PROTOBUF_FIELD_OFFSET(::rome::metrics::StopwatchProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rome::metrics::StopwatchProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rome::metrics::StopwatchProto, runtime_ns_),
  0,
  PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, units_),
  PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, mean_),
  PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, stddev_),
  PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, min_),
  PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, p50_),
  PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, p90_),
  PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, p95_),
  PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, p99_),
  PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, p999_),
  PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, max_),
  PROTOBUF_FIELD_OFFSET(::rome::metrics::SummaryProto, count_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::rome::metrics::MetricProto)},
  { 14, 20, sizeof(::rome::metrics::CounterProto)},
  { 21, 27, sizeof(::rome::metrics::StopwatchProto)},
  { 28, 44, sizeof(::rome::metrics::SummaryProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rome::metrics::_MetricProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rome::metrics::_CounterProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rome::metrics::_StopwatchProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rome::metrics::_SummaryProto_default_instance_),
};

const char descriptor_table_protodef_metrics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmetrics.proto\022\014rome.metrics\"\266\001\n\013Metric"
  "Proto\022\014\n\004name\030\001 \001(\t\022-\n\007counter\030\002 \001(\0132\032.r"
  "ome.metrics.CounterProtoH\000\0221\n\tstopwatch\030"
  "\003 \001(\0132\034.rome.metrics.StopwatchProtoH\000\022-\n"
  "\007summary\030\004 \001(\0132\032.rome.metrics.SummaryPro"
  "toH\000B\010\n\006metric\"\035\n\014CounterProto\022\r\n\005count\030"
  "\001 \001(\004\"$\n\016StopwatchProto\022\022\n\nruntime_ns\030\001 "
  "\001(\004\"\246\001\n\014SummaryProto\022\r\n\005units\030\001 \001(\t\022\014\n\004m"
  "ean\030\002 \001(\001\022\016\n\006stddev\030\003 \001(\001\022\013\n\003min\030\004 \001(\001\022\013"
  "\n\003p50\030\006 \001(\001\022\013\n\003p90\030\007 \001(\001\022\013\n\003p95\030\010 \001(\001\022\013\n"
  "\003p99\030\t \001(\001\022\014\n\004p999\030\n \001(\001\022\013\n\003max\030\013 \001(\001\022\r\n"
  "\005count\030\014 \001(\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_metrics_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_metrics_2eproto_sccs[4] = {
  &scc_info_CounterProto_metrics_2eproto.base,
  &scc_info_MetricProto_metrics_2eproto.base,
  &scc_info_StopwatchProto_metrics_2eproto.base,
  &scc_info_SummaryProto_metrics_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_metrics_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_metrics_2eproto = {
  false, false, descriptor_table_protodef_metrics_2eproto, "metrics.proto", 452,
  &descriptor_table_metrics_2eproto_once, descriptor_table_metrics_2eproto_sccs, descriptor_table_metrics_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_metrics_2eproto::offsets,
  file_level_metadata_metrics_2eproto, 4, file_level_enum_descriptors_metrics_2eproto, file_level_service_descriptors_metrics_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_metrics_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_metrics_2eproto)), true);
namespace rome {
namespace metrics {

// ===================================================================

void MetricProto::InitAsDefaultInstance() {
  ::rome::metrics::_MetricProto_default_instance_.counter_ = const_cast< ::rome::metrics::CounterProto*>(
      ::rome::metrics::CounterProto::internal_default_instance());
  ::rome::metrics::_MetricProto_default_instance_.stopwatch_ = const_cast< ::rome::metrics::StopwatchProto*>(
      ::rome::metrics::StopwatchProto::internal_default_instance());
  ::rome::metrics::_MetricProto_default_instance_.summary_ = const_cast< ::rome::metrics::SummaryProto*>(
      ::rome::metrics::SummaryProto::internal_default_instance());
}
class MetricProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MetricProto>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::rome::metrics::CounterProto& counter(const MetricProto* msg);
  static const ::rome::metrics::StopwatchProto& stopwatch(const MetricProto* msg);
  static const ::rome::metrics::SummaryProto& summary(const MetricProto* msg);
};

const ::rome::metrics::CounterProto&
MetricProto::_Internal::counter(const MetricProto* msg) {
  return *msg->metric_.counter_;
}
const ::rome::metrics::StopwatchProto&
MetricProto::_Internal::stopwatch(const MetricProto* msg) {
  return *msg->metric_.stopwatch_;
}
const ::rome::metrics::SummaryProto&
MetricProto::_Internal::summary(const MetricProto* msg) {
  return *msg->metric_.summary_;
}
void MetricProto::set_allocated_counter(::rome::metrics::CounterProto* counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_metric();
  if (counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(counter);
    if (message_arena != submessage_arena) {
      counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counter, submessage_arena);
    }
    set_has_counter();
    metric_.counter_ = counter;
  }
  // @@protoc_insertion_point(field_set_allocated:rome.metrics.MetricProto.counter)
}
void MetricProto::set_allocated_stopwatch(::rome::metrics::StopwatchProto* stopwatch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_metric();
  if (stopwatch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stopwatch);
    if (message_arena != submessage_arena) {
      stopwatch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stopwatch, submessage_arena);
    }
    set_has_stopwatch();
    metric_.stopwatch_ = stopwatch;
  }
  // @@protoc_insertion_point(field_set_allocated:rome.metrics.MetricProto.stopwatch)
}
void MetricProto::set_allocated_summary(::rome::metrics::SummaryProto* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_metric();
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(summary);
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    set_has_summary();
    metric_.summary_ = summary;
  }
  // @@protoc_insertion_point(field_set_allocated:rome.metrics.MetricProto.summary)
}
MetricProto::MetricProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rome.metrics.MetricProto)
}
MetricProto::MetricProto(const MetricProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  clear_has_metric();
  switch (from.metric_case()) {
    case kCounter: {
      _internal_mutable_counter()->::rome::metrics::CounterProto::MergeFrom(from._internal_counter());
      break;
    }
    case kStopwatch: {
      _internal_mutable_stopwatch()->::rome::metrics::StopwatchProto::MergeFrom(from._internal_stopwatch());
      break;
    }
    case kSummary: {
      _internal_mutable_summary()->::rome::metrics::SummaryProto::MergeFrom(from._internal_summary());
      break;
    }
    case METRIC_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rome.metrics.MetricProto)
}

void MetricProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetricProto_metrics_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_metric();
}

MetricProto::~MetricProto() {
  // @@protoc_insertion_point(destructor:rome.metrics.MetricProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetricProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_metric()) {
    clear_metric();
  }
}

void MetricProto::ArenaDtor(void* object) {
  MetricProto* _this = reinterpret_cast< MetricProto* >(object);
  (void)_this;
}
void MetricProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetricProto& MetricProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetricProto_metrics_2eproto.base);
  return *internal_default_instance();
}


void MetricProto::clear_metric() {
// @@protoc_insertion_point(one_of_clear_start:rome.metrics.MetricProto)
  switch (metric_case()) {
    case kCounter: {
      if (GetArena() == nullptr) {
        delete metric_.counter_;
      }
      break;
    }
    case kStopwatch: {
      if (GetArena() == nullptr) {
        delete metric_.stopwatch_;
      }
      break;
    }
    case kSummary: {
      if (GetArena() == nullptr) {
        delete metric_.summary_;
      }
      break;
    }
    case METRIC_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = METRIC_NOT_SET;
}


void MetricProto::Clear() {
// @@protoc_insertion_point(message_clear_start:rome.metrics.MetricProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  clear_metric();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rome.metrics.MetricProto.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rome.metrics.CounterProto counter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rome.metrics.StopwatchProto stopwatch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stopwatch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rome.metrics.SummaryProto summary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rome.metrics.MetricProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rome.metrics.MetricProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  switch (metric_case()) {
    case kCounter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::counter(this), target, stream);
      break;
    }
    case kStopwatch: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::stopwatch(this), target, stream);
      break;
    }
    case kSummary: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::summary(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rome.metrics.MetricProto)
  return target;
}

size_t MetricProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rome.metrics.MetricProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  switch (metric_case()) {
    // .rome.metrics.CounterProto counter = 2;
    case kCounter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metric_.counter_);
      break;
    }
    // .rome.metrics.StopwatchProto stopwatch = 3;
    case kStopwatch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metric_.stopwatch_);
      break;
    }
    // .rome.metrics.SummaryProto summary = 4;
    case kSummary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metric_.summary_);
      break;
    }
    case METRIC_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rome.metrics.MetricProto)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetricProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rome.metrics.MetricProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rome.metrics.MetricProto)
    MergeFrom(*source);
  }
}

void MetricProto::MergeFrom(const MetricProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rome.metrics.MetricProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
  switch (from.metric_case()) {
    case kCounter: {
      _internal_mutable_counter()->::rome::metrics::CounterProto::MergeFrom(from._internal_counter());
      break;
    }
    case kStopwatch: {
      _internal_mutable_stopwatch()->::rome::metrics::StopwatchProto::MergeFrom(from._internal_stopwatch());
      break;
    }
    case kSummary: {
      _internal_mutable_summary()->::rome::metrics::SummaryProto::MergeFrom(from._internal_summary());
      break;
    }
    case METRIC_NOT_SET: {
      break;
    }
  }
}

void MetricProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rome.metrics.MetricProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricProto::CopyFrom(const MetricProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rome.metrics.MetricProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricProto::IsInitialized() const {
  return true;
}

void MetricProto::InternalSwap(MetricProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(metric_, other->metric_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CounterProto::InitAsDefaultInstance() {
}
class CounterProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CounterProto>()._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CounterProto::CounterProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rome.metrics.CounterProto)
}
CounterProto::CounterProto(const CounterProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:rome.metrics.CounterProto)
}

void CounterProto::SharedCtor() {
  count_ = PROTOBUF_ULONGLONG(0);
}

CounterProto::~CounterProto() {
  // @@protoc_insertion_point(destructor:rome.metrics.CounterProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CounterProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CounterProto::ArenaDtor(void* object) {
  CounterProto* _this = reinterpret_cast< CounterProto* >(object);
  (void)_this;
}
void CounterProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CounterProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CounterProto& CounterProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CounterProto_metrics_2eproto.base);
  return *internal_default_instance();
}


void CounterProto::Clear() {
// @@protoc_insertion_point(message_clear_start:rome.metrics.CounterProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CounterProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CounterProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rome.metrics.CounterProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rome.metrics.CounterProto)
  return target;
}

size_t CounterProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rome.metrics.CounterProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 count = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CounterProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rome.metrics.CounterProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CounterProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CounterProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rome.metrics.CounterProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rome.metrics.CounterProto)
    MergeFrom(*source);
  }
}

void CounterProto::MergeFrom(const CounterProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rome.metrics.CounterProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_count()) {
    _internal_set_count(from._internal_count());
  }
}

void CounterProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rome.metrics.CounterProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CounterProto::CopyFrom(const CounterProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rome.metrics.CounterProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterProto::IsInitialized() const {
  return true;
}

void CounterProto::InternalSwap(CounterProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CounterProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopwatchProto::InitAsDefaultInstance() {
}
class StopwatchProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StopwatchProto>()._has_bits_);
  static void set_has_runtime_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StopwatchProto::StopwatchProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rome.metrics.StopwatchProto)
}
StopwatchProto::StopwatchProto(const StopwatchProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  runtime_ns_ = from.runtime_ns_;
  // @@protoc_insertion_point(copy_constructor:rome.metrics.StopwatchProto)
}

void StopwatchProto::SharedCtor() {
  runtime_ns_ = PROTOBUF_ULONGLONG(0);
}

StopwatchProto::~StopwatchProto() {
  // @@protoc_insertion_point(destructor:rome.metrics.StopwatchProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopwatchProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StopwatchProto::ArenaDtor(void* object) {
  StopwatchProto* _this = reinterpret_cast< StopwatchProto* >(object);
  (void)_this;
}
void StopwatchProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopwatchProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopwatchProto& StopwatchProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopwatchProto_metrics_2eproto.base);
  return *internal_default_instance();
}


void StopwatchProto::Clear() {
// @@protoc_insertion_point(message_clear_start:rome.metrics.StopwatchProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  runtime_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopwatchProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 runtime_ns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_runtime_ns(&has_bits);
          runtime_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopwatchProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rome.metrics.StopwatchProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 runtime_ns = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_runtime_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rome.metrics.StopwatchProto)
  return target;
}

size_t StopwatchProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rome.metrics.StopwatchProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 runtime_ns = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_runtime_ns());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopwatchProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rome.metrics.StopwatchProto)
  GOOGLE_DCHECK_NE(&from, this);
  const StopwatchProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopwatchProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rome.metrics.StopwatchProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rome.metrics.StopwatchProto)
    MergeFrom(*source);
  }
}

void StopwatchProto::MergeFrom(const StopwatchProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rome.metrics.StopwatchProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_runtime_ns()) {
    _internal_set_runtime_ns(from._internal_runtime_ns());
  }
}

void StopwatchProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rome.metrics.StopwatchProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopwatchProto::CopyFrom(const StopwatchProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rome.metrics.StopwatchProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopwatchProto::IsInitialized() const {
  return true;
}

void StopwatchProto::InternalSwap(StopwatchProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(runtime_ns_, other->runtime_ns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopwatchProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SummaryProto::InitAsDefaultInstance() {
}
class SummaryProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SummaryProto>()._has_bits_);
  static void set_has_units(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mean(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stddev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_p50(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_p90(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_p95(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_p99(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_p999(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

SummaryProto::SummaryProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rome.metrics.SummaryProto)
}
SummaryProto::SummaryProto(const SummaryProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_units()) {
    units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_units(),
      GetArena());
  }
  ::memcpy(&mean_, &from.mean_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&mean_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:rome.metrics.SummaryProto)
}

void SummaryProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SummaryProto_metrics_2eproto.base);
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&mean_)) + sizeof(count_));
}

SummaryProto::~SummaryProto() {
  // @@protoc_insertion_point(destructor:rome.metrics.SummaryProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SummaryProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  units_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SummaryProto::ArenaDtor(void* object) {
  SummaryProto* _this = reinterpret_cast< SummaryProto* >(object);
  (void)_this;
}
void SummaryProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SummaryProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SummaryProto& SummaryProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SummaryProto_metrics_2eproto.base);
  return *internal_default_instance();
}


void SummaryProto::Clear() {
// @@protoc_insertion_point(message_clear_start:rome.metrics.SummaryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    units_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&mean_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&p99_) -
        reinterpret_cast<char*>(&mean_)) + sizeof(p99_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&p999_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&p999_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_units();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rome.metrics.SummaryProto.units");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double mean = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_mean(&has_bits);
          mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double stddev = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_stddev(&has_bits);
          stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_min(&has_bits);
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double p50 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_p50(&has_bits);
          p50_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double p90 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_p90(&has_bits);
          p90_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double p95 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_p95(&has_bits);
          p95_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double p99 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_p99(&has_bits);
          p99_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double p999 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_p999(&has_bits);
          p999_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_max(&has_bits);
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 count = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SummaryProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rome.metrics.SummaryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string units = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_units().data(), static_cast<int>(this->_internal_units().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rome.metrics.SummaryProto.units");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_units(), target);
  }

  // optional double mean = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_mean(), target);
  }

  // optional double stddev = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_stddev(), target);
  }

  // optional double min = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_min(), target);
  }

  // optional double p50 = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_p50(), target);
  }

  // optional double p90 = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_p90(), target);
  }

  // optional double p95 = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_p95(), target);
  }

  // optional double p99 = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_p99(), target);
  }

  // optional double p999 = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_p999(), target);
  }

  // optional double max = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_max(), target);
  }

  // optional uint64 count = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rome.metrics.SummaryProto)
  return target;
}

size_t SummaryProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rome.metrics.SummaryProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string units = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_units());
    }

    // optional double mean = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double stddev = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double min = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double p50 = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double p90 = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double p95 = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double p99 = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double p999 = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double max = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional uint64 count = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SummaryProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rome.metrics.SummaryProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SummaryProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SummaryProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rome.metrics.SummaryProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rome.metrics.SummaryProto)
    MergeFrom(*source);
  }
}

void SummaryProto::MergeFrom(const SummaryProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rome.metrics.SummaryProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_units(from._internal_units());
    }
    if (cached_has_bits & 0x00000002u) {
      mean_ = from.mean_;
    }
    if (cached_has_bits & 0x00000004u) {
      stddev_ = from.stddev_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000010u) {
      p50_ = from.p50_;
    }
    if (cached_has_bits & 0x00000020u) {
      p90_ = from.p90_;
    }
    if (cached_has_bits & 0x00000040u) {
      p95_ = from.p95_;
    }
    if (cached_has_bits & 0x00000080u) {
      p99_ = from.p99_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      p999_ = from.p999_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_ = from.max_;
    }
    if (cached_has_bits & 0x00000400u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SummaryProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rome.metrics.SummaryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummaryProto::CopyFrom(const SummaryProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rome.metrics.SummaryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryProto::IsInitialized() const {
  return true;
}

void SummaryProto::InternalSwap(SummaryProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  units_.Swap(&other->units_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SummaryProto, count_)
      + sizeof(SummaryProto::count_)
      - PROTOBUF_FIELD_OFFSET(SummaryProto, mean_)>(
          reinterpret_cast<char*>(&mean_),
          reinterpret_cast<char*>(&other->mean_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
}  // namespace rome
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rome::metrics::MetricProto* Arena::CreateMaybeMessage< ::rome::metrics::MetricProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rome::metrics::MetricProto >(arena);
}
template<> PROTOBUF_NOINLINE ::rome::metrics::CounterProto* Arena::CreateMaybeMessage< ::rome::metrics::CounterProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rome::metrics::CounterProto >(arena);
}
template<> PROTOBUF_NOINLINE ::rome::metrics::StopwatchProto* Arena::CreateMaybeMessage< ::rome::metrics::StopwatchProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rome::metrics::StopwatchProto >(arena);
}
template<> PROTOBUF_NOINLINE ::rome::metrics::SummaryProto* Arena::CreateMaybeMessage< ::rome::metrics::SummaryProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rome::metrics::SummaryProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
