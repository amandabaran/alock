// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: workloaddriver.proto

#include "workloaddriver.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_metrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MetricProto_metrics_2eproto;
namespace rome {
class WorkloadDriverProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkloadDriverProto> _instance;
} _WorkloadDriverProto_default_instance_;
}  // namespace rome
static void InitDefaultsscc_info_WorkloadDriverProto_workloaddriver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rome::_WorkloadDriverProto_default_instance_;
    new (ptr) ::rome::WorkloadDriverProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rome::WorkloadDriverProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkloadDriverProto_workloaddriver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WorkloadDriverProto_workloaddriver_2eproto}, {
      &scc_info_MetricProto_metrics_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_workloaddriver_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_workloaddriver_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_workloaddriver_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_workloaddriver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::rome::WorkloadDriverProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rome::WorkloadDriverProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rome::WorkloadDriverProto, ops_),
  PROTOBUF_FIELD_OFFSET(::rome::WorkloadDriverProto, runtime_),
  PROTOBUF_FIELD_OFFSET(::rome::WorkloadDriverProto, qps_),
  PROTOBUF_FIELD_OFFSET(::rome::WorkloadDriverProto, latency_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::rome::WorkloadDriverProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rome::_WorkloadDriverProto_default_instance_),
};

const char descriptor_table_protodef_workloaddriver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024workloaddriver.proto\022\004rome\032\rmetrics.pr"
  "oto\"\275\001\n\023WorkloadDriverProto\022&\n\003ops\030\002 \001(\013"
  "2\031.rome.metrics.MetricProto\022*\n\007runtime\030\003"
  " \001(\0132\031.rome.metrics.MetricProto\022&\n\003qps\030\004"
  " \001(\0132\031.rome.metrics.MetricProto\022*\n\007laten"
  "cy\030\005 \001(\0132\031.rome.metrics.MetricProto"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_workloaddriver_2eproto_deps[1] = {
  &::descriptor_table_metrics_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_workloaddriver_2eproto_sccs[1] = {
  &scc_info_WorkloadDriverProto_workloaddriver_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_workloaddriver_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_workloaddriver_2eproto = {
  false, false, descriptor_table_protodef_workloaddriver_2eproto, "workloaddriver.proto", 235,
  &descriptor_table_workloaddriver_2eproto_once, descriptor_table_workloaddriver_2eproto_sccs, descriptor_table_workloaddriver_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_workloaddriver_2eproto::offsets,
  file_level_metadata_workloaddriver_2eproto, 1, file_level_enum_descriptors_workloaddriver_2eproto, file_level_service_descriptors_workloaddriver_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_workloaddriver_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_workloaddriver_2eproto)), true);
namespace rome {

// ===================================================================

void WorkloadDriverProto::InitAsDefaultInstance() {
  ::rome::_WorkloadDriverProto_default_instance_._instance.get_mutable()->ops_ = const_cast< ::rome::metrics::MetricProto*>(
      ::rome::metrics::MetricProto::internal_default_instance());
  ::rome::_WorkloadDriverProto_default_instance_._instance.get_mutable()->runtime_ = const_cast< ::rome::metrics::MetricProto*>(
      ::rome::metrics::MetricProto::internal_default_instance());
  ::rome::_WorkloadDriverProto_default_instance_._instance.get_mutable()->qps_ = const_cast< ::rome::metrics::MetricProto*>(
      ::rome::metrics::MetricProto::internal_default_instance());
  ::rome::_WorkloadDriverProto_default_instance_._instance.get_mutable()->latency_ = const_cast< ::rome::metrics::MetricProto*>(
      ::rome::metrics::MetricProto::internal_default_instance());
}
class WorkloadDriverProto::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkloadDriverProto>()._has_bits_);
  static const ::rome::metrics::MetricProto& ops(const WorkloadDriverProto* msg);
  static void set_has_ops(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::rome::metrics::MetricProto& runtime(const WorkloadDriverProto* msg);
  static void set_has_runtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::rome::metrics::MetricProto& qps(const WorkloadDriverProto* msg);
  static void set_has_qps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::rome::metrics::MetricProto& latency(const WorkloadDriverProto* msg);
  static void set_has_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::rome::metrics::MetricProto&
WorkloadDriverProto::_Internal::ops(const WorkloadDriverProto* msg) {
  return *msg->ops_;
}
const ::rome::metrics::MetricProto&
WorkloadDriverProto::_Internal::runtime(const WorkloadDriverProto* msg) {
  return *msg->runtime_;
}
const ::rome::metrics::MetricProto&
WorkloadDriverProto::_Internal::qps(const WorkloadDriverProto* msg) {
  return *msg->qps_;
}
const ::rome::metrics::MetricProto&
WorkloadDriverProto::_Internal::latency(const WorkloadDriverProto* msg) {
  return *msg->latency_;
}
void WorkloadDriverProto::clear_ops() {
  if (ops_ != nullptr) ops_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void WorkloadDriverProto::clear_runtime() {
  if (runtime_ != nullptr) runtime_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void WorkloadDriverProto::clear_qps() {
  if (qps_ != nullptr) qps_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void WorkloadDriverProto::clear_latency() {
  if (latency_ != nullptr) latency_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
WorkloadDriverProto::WorkloadDriverProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rome.WorkloadDriverProto)
}
WorkloadDriverProto::WorkloadDriverProto(const WorkloadDriverProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ops()) {
    ops_ = new ::rome::metrics::MetricProto(*from.ops_);
  } else {
    ops_ = nullptr;
  }
  if (from._internal_has_runtime()) {
    runtime_ = new ::rome::metrics::MetricProto(*from.runtime_);
  } else {
    runtime_ = nullptr;
  }
  if (from._internal_has_qps()) {
    qps_ = new ::rome::metrics::MetricProto(*from.qps_);
  } else {
    qps_ = nullptr;
  }
  if (from._internal_has_latency()) {
    latency_ = new ::rome::metrics::MetricProto(*from.latency_);
  } else {
    latency_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rome.WorkloadDriverProto)
}

void WorkloadDriverProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkloadDriverProto_workloaddriver_2eproto.base);
  ::memset(&ops_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latency_) -
      reinterpret_cast<char*>(&ops_)) + sizeof(latency_));
}

WorkloadDriverProto::~WorkloadDriverProto() {
  // @@protoc_insertion_point(destructor:rome.WorkloadDriverProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkloadDriverProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ops_;
  if (this != internal_default_instance()) delete runtime_;
  if (this != internal_default_instance()) delete qps_;
  if (this != internal_default_instance()) delete latency_;
}

void WorkloadDriverProto::ArenaDtor(void* object) {
  WorkloadDriverProto* _this = reinterpret_cast< WorkloadDriverProto* >(object);
  (void)_this;
}
void WorkloadDriverProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkloadDriverProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkloadDriverProto& WorkloadDriverProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkloadDriverProto_workloaddriver_2eproto.base);
  return *internal_default_instance();
}


void WorkloadDriverProto::Clear() {
// @@protoc_insertion_point(message_clear_start:rome.WorkloadDriverProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ops_ != nullptr);
      ops_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(runtime_ != nullptr);
      runtime_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(qps_ != nullptr);
      qps_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(latency_ != nullptr);
      latency_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkloadDriverProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .rome.metrics.MetricProto ops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ops(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rome.metrics.MetricProto runtime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_runtime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rome.metrics.MetricProto qps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_qps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rome.metrics.MetricProto latency = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_latency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkloadDriverProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rome.WorkloadDriverProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .rome.metrics.MetricProto ops = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ops(this), target, stream);
  }

  // optional .rome.metrics.MetricProto runtime = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::runtime(this), target, stream);
  }

  // optional .rome.metrics.MetricProto qps = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::qps(this), target, stream);
  }

  // optional .rome.metrics.MetricProto latency = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::latency(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rome.WorkloadDriverProto)
  return target;
}

size_t WorkloadDriverProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rome.WorkloadDriverProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .rome.metrics.MetricProto ops = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ops_);
    }

    // optional .rome.metrics.MetricProto runtime = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *runtime_);
    }

    // optional .rome.metrics.MetricProto qps = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *qps_);
    }

    // optional .rome.metrics.MetricProto latency = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *latency_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkloadDriverProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rome.WorkloadDriverProto)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkloadDriverProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkloadDriverProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rome.WorkloadDriverProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rome.WorkloadDriverProto)
    MergeFrom(*source);
  }
}

void WorkloadDriverProto::MergeFrom(const WorkloadDriverProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rome.WorkloadDriverProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ops()->::rome::metrics::MetricProto::MergeFrom(from._internal_ops());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_runtime()->::rome::metrics::MetricProto::MergeFrom(from._internal_runtime());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_qps()->::rome::metrics::MetricProto::MergeFrom(from._internal_qps());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_latency()->::rome::metrics::MetricProto::MergeFrom(from._internal_latency());
    }
  }
}

void WorkloadDriverProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rome.WorkloadDriverProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkloadDriverProto::CopyFrom(const WorkloadDriverProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rome.WorkloadDriverProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkloadDriverProto::IsInitialized() const {
  return true;
}

void WorkloadDriverProto::InternalSwap(WorkloadDriverProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkloadDriverProto, latency_)
      + sizeof(WorkloadDriverProto::latency_)
      - PROTOBUF_FIELD_OFFSET(WorkloadDriverProto, ops_)>(
          reinterpret_cast<char*>(&ops_),
          reinterpret_cast<char*>(&other->ops_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkloadDriverProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rome
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rome::WorkloadDriverProto* Arena::CreateMaybeMessage< ::rome::WorkloadDriverProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rome::WorkloadDriverProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
