// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: experiment.proto

#include "experiment.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_experiment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExperimentParams_experiment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_workloaddriver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkloadDriverProto_workloaddriver_2eproto;
class AckProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckProto> _instance;
} _AckProto_default_instance_;
class ExperimentParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExperimentParams> _instance;
} _ExperimentParams_default_instance_;
class ResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResultProto> _instance;
} _ResultProto_default_instance_;
static void InitDefaultsscc_info_AckProto_experiment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AckProto_default_instance_;
    new (ptr) ::AckProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AckProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AckProto_experiment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AckProto_experiment_2eproto}, {}};

static void InitDefaultsscc_info_ExperimentParams_experiment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ExperimentParams_default_instance_;
    new (ptr) ::ExperimentParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ExperimentParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExperimentParams_experiment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExperimentParams_experiment_2eproto}, {}};

static void InitDefaultsscc_info_ResultProto_experiment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ResultProto_default_instance_;
    new (ptr) ::ResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResultProto_experiment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ResultProto_experiment_2eproto}, {
      &scc_info_ExperimentParams_experiment_2eproto.base,
      &scc_info_WorkloadDriverProto_workloaddriver_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_experiment_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_experiment_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_experiment_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_experiment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AckProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, qps_sample_rate_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, max_qps_second_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, runtime_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, unlimited_stream_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, op_count_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, contains_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, insert_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, remove_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, key_lb_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, key_ub_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, region_size_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, thread_count_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, node_count_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, qp_max_),
  PROTOBUF_FIELD_OFFSET(::ExperimentParams, node_id_),
  3,
  4,
  5,
  0,
  6,
  7,
  8,
  9,
  1,
  10,
  11,
  12,
  2,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::ResultProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ResultProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ResultProto, params_),
  PROTOBUF_FIELD_OFFSET(::ResultProto, driver_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AckProto)},
  { 5, 25, sizeof(::ExperimentParams)},
  { 40, 47, sizeof(::ResultProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AckProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ExperimentParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ResultProto_default_instance_),
};

const char descriptor_table_protodef_experiment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020experiment.proto\032\024workloaddriver.proto"
  "\"\n\n\010AckProto\"\366\002\n\020ExperimentParams\022\033\n\017qps"
  "_sample_rate\030\002 \002(\005:\00210\022\032\n\016max_qps_second"
  "\030\003 \002(\005:\002-1\022\023\n\007runtime\030\004 \002(\005:\00210\022\037\n\020unlim"
  "ited_stream\030\005 \002(\010:\005false\022\027\n\010op_count\030\006 \002"
  "(\005:\00510000\022\024\n\010contains\030\007 \002(\005:\00280\022\022\n\006inser"
  "t\030\010 \002(\005:\00210\022\022\n\006remove\030\t \002(\005:\00210\022\021\n\006key_l"
  "b\030\n \002(\005:\0010\022\027\n\006key_ub\030\013 \002(\005:\0071000000\022\027\n\013r"
  "egion_size\030\014 \002(\005:\00222\022\027\n\014thread_count\030\r \002"
  "(\005:\0011\022\025\n\nnode_count\030\016 \002(\005:\0010\022\022\n\006qp_max\030\017"
  " \002(\005:\00230\022\023\n\007node_id\030\020 \002(\005:\002-1\"[\n\013ResultP"
  "roto\022!\n\006params\030\001 \001(\0132\021.ExperimentParams\022"
  ")\n\006driver\030\002 \003(\0132\031.rome.WorkloadDriverPro"
  "to"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_experiment_2eproto_deps[1] = {
  &::descriptor_table_workloaddriver_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_experiment_2eproto_sccs[3] = {
  &scc_info_AckProto_experiment_2eproto.base,
  &scc_info_ExperimentParams_experiment_2eproto.base,
  &scc_info_ResultProto_experiment_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_experiment_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_experiment_2eproto = {
  false, false, descriptor_table_protodef_experiment_2eproto, "experiment.proto", 522,
  &descriptor_table_experiment_2eproto_once, descriptor_table_experiment_2eproto_sccs, descriptor_table_experiment_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_experiment_2eproto::offsets,
  file_level_metadata_experiment_2eproto, 3, file_level_enum_descriptors_experiment_2eproto, file_level_service_descriptors_experiment_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_experiment_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_experiment_2eproto)), true);

// ===================================================================

void AckProto::InitAsDefaultInstance() {
}
class AckProto::_Internal {
 public:
};

AckProto::AckProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AckProto)
}
AckProto::AckProto(const AckProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AckProto)
}

void AckProto::SharedCtor() {
}

AckProto::~AckProto() {
  // @@protoc_insertion_point(destructor:AckProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AckProto::ArenaDtor(void* object) {
  AckProto* _this = reinterpret_cast< AckProto* >(object);
  (void)_this;
}
void AckProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckProto& AckProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckProto_experiment_2eproto.base);
  return *internal_default_instance();
}


void AckProto::Clear() {
// @@protoc_insertion_point(message_clear_start:AckProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AckProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AckProto)
  return target;
}

size_t AckProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AckProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AckProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AckProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AckProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AckProto)
    MergeFrom(*source);
  }
}

void AckProto::MergeFrom(const AckProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AckProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AckProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AckProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckProto::CopyFrom(const AckProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AckProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckProto::IsInitialized() const {
  return true;
}

void AckProto::InternalSwap(AckProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExperimentParams::InitAsDefaultInstance() {
}
class ExperimentParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ExperimentParams>()._has_bits_);
  static void set_has_qps_sample_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_qps_second(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_runtime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_unlimited_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_op_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_contains(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_insert(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_remove(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_key_lb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key_ub(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_region_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_thread_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_node_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_qp_max(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00007fff) ^ 0x00007fff) != 0;
  }
};

ExperimentParams::ExperimentParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ExperimentParams)
}
ExperimentParams::ExperimentParams(const ExperimentParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&unlimited_stream_, &from.unlimited_stream_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_id_) -
    reinterpret_cast<char*>(&unlimited_stream_)) + sizeof(node_id_));
  // @@protoc_insertion_point(copy_constructor:ExperimentParams)
}

void ExperimentParams::SharedCtor() {
  ::memset(&unlimited_stream_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_count_) -
      reinterpret_cast<char*>(&unlimited_stream_)) + sizeof(node_count_));
  qps_sample_rate_ = 10;
  max_qps_second_ = -1;
  runtime_ = 10;
  op_count_ = 10000;
  contains_ = 80;
  insert_ = 10;
  remove_ = 10;
  key_ub_ = 1000000;
  region_size_ = 22;
  thread_count_ = 1;
  qp_max_ = 30;
  node_id_ = -1;
}

ExperimentParams::~ExperimentParams() {
  // @@protoc_insertion_point(destructor:ExperimentParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExperimentParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExperimentParams::ArenaDtor(void* object) {
  ExperimentParams* _this = reinterpret_cast< ExperimentParams* >(object);
  (void)_this;
}
void ExperimentParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExperimentParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExperimentParams& ExperimentParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExperimentParams_experiment_2eproto.base);
  return *internal_default_instance();
}


void ExperimentParams::Clear() {
// @@protoc_insertion_point(message_clear_start:ExperimentParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&unlimited_stream_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&node_count_) -
        reinterpret_cast<char*>(&unlimited_stream_)) + sizeof(node_count_));
    qps_sample_rate_ = 10;
    max_qps_second_ = -1;
    runtime_ = 10;
    op_count_ = 10000;
    contains_ = 80;
  }
  if (cached_has_bits & 0x00007f00u) {
    insert_ = 10;
    remove_ = 10;
    key_ub_ = 1000000;
    region_size_ = 22;
    thread_count_ = 1;
    qp_max_ = 30;
    node_id_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExperimentParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 qps_sample_rate = 2 [default = 10];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_qps_sample_rate(&has_bits);
          qps_sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 max_qps_second = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_qps_second(&has_bits);
          max_qps_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 runtime = 4 [default = 10];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_runtime(&has_bits);
          runtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool unlimited_stream = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_unlimited_stream(&has_bits);
          unlimited_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 op_count = 6 [default = 10000];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_op_count(&has_bits);
          op_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 contains = 7 [default = 80];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_contains(&has_bits);
          contains_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 insert = 8 [default = 10];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_insert(&has_bits);
          insert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 remove = 9 [default = 10];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_remove(&has_bits);
          remove_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 key_lb = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_key_lb(&has_bits);
          key_lb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 key_ub = 11 [default = 1000000];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_key_ub(&has_bits);
          key_ub_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 region_size = 12 [default = 22];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_region_size(&has_bits);
          region_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 thread_count = 13 [default = 1];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_thread_count(&has_bits);
          thread_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 node_count = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_node_count(&has_bits);
          node_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 qp_max = 15 [default = 30];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_qp_max(&has_bits);
          qp_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 node_id = 16 [default = -1];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_node_id(&has_bits);
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExperimentParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExperimentParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 qps_sample_rate = 2 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_qps_sample_rate(), target);
  }

  // required int32 max_qps_second = 3 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_qps_second(), target);
  }

  // required int32 runtime = 4 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_runtime(), target);
  }

  // required bool unlimited_stream = 5 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_unlimited_stream(), target);
  }

  // required int32 op_count = 6 [default = 10000];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_op_count(), target);
  }

  // required int32 contains = 7 [default = 80];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_contains(), target);
  }

  // required int32 insert = 8 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_insert(), target);
  }

  // required int32 remove = 9 [default = 10];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_remove(), target);
  }

  // required int32 key_lb = 10 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_key_lb(), target);
  }

  // required int32 key_ub = 11 [default = 1000000];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_key_ub(), target);
  }

  // required int32 region_size = 12 [default = 22];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_region_size(), target);
  }

  // required int32 thread_count = 13 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_thread_count(), target);
  }

  // required int32 node_count = 14 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_node_count(), target);
  }

  // required int32 qp_max = 15 [default = 30];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_qp_max(), target);
  }

  // required int32 node_id = 16 [default = -1];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExperimentParams)
  return target;
}

size_t ExperimentParams::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ExperimentParams)
  size_t total_size = 0;

  if (_internal_has_unlimited_stream()) {
    // required bool unlimited_stream = 5 [default = false];
    total_size += 1 + 1;
  }

  if (_internal_has_key_lb()) {
    // required int32 key_lb = 10 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_key_lb());
  }

  if (_internal_has_node_count()) {
    // required int32 node_count = 14 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_count());
  }

  if (_internal_has_qps_sample_rate()) {
    // required int32 qps_sample_rate = 2 [default = 10];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_qps_sample_rate());
  }

  if (_internal_has_max_qps_second()) {
    // required int32 max_qps_second = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_qps_second());
  }

  if (_internal_has_runtime()) {
    // required int32 runtime = 4 [default = 10];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_runtime());
  }

  if (_internal_has_op_count()) {
    // required int32 op_count = 6 [default = 10000];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_op_count());
  }

  if (_internal_has_contains()) {
    // required int32 contains = 7 [default = 80];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contains());
  }

  if (_internal_has_insert()) {
    // required int32 insert = 8 [default = 10];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_insert());
  }

  if (_internal_has_remove()) {
    // required int32 remove = 9 [default = 10];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remove());
  }

  if (_internal_has_key_ub()) {
    // required int32 key_ub = 11 [default = 1000000];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_key_ub());
  }

  if (_internal_has_region_size()) {
    // required int32 region_size = 12 [default = 22];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_region_size());
  }

  if (_internal_has_thread_count()) {
    // required int32 thread_count = 13 [default = 1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_thread_count());
  }

  if (_internal_has_qp_max()) {
    // required int32 qp_max = 15 [default = 30];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_qp_max());
  }

  if (_internal_has_node_id()) {
    // required int32 node_id = 16 [default = -1];
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_id());
  }

  return total_size;
}
size_t ExperimentParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExperimentParams)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00007fff) ^ 0x00007fff) == 0) {  // All required fields are present.
    // required bool unlimited_stream = 5 [default = false];
    total_size += 1 + 1;

    // required int32 key_lb = 10 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_key_lb());

    // required int32 node_count = 14 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_count());

    // required int32 qps_sample_rate = 2 [default = 10];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_qps_sample_rate());

    // required int32 max_qps_second = 3 [default = -1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_qps_second());

    // required int32 runtime = 4 [default = 10];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_runtime());

    // required int32 op_count = 6 [default = 10000];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_op_count());

    // required int32 contains = 7 [default = 80];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contains());

    // required int32 insert = 8 [default = 10];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_insert());

    // required int32 remove = 9 [default = 10];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remove());

    // required int32 key_ub = 11 [default = 1000000];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_key_ub());

    // required int32 region_size = 12 [default = 22];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_region_size());

    // required int32 thread_count = 13 [default = 1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_thread_count());

    // required int32 qp_max = 15 [default = 30];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_qp_max());

    // required int32 node_id = 16 [default = -1];
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExperimentParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ExperimentParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ExperimentParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExperimentParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ExperimentParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ExperimentParams)
    MergeFrom(*source);
  }
}

void ExperimentParams::MergeFrom(const ExperimentParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ExperimentParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      unlimited_stream_ = from.unlimited_stream_;
    }
    if (cached_has_bits & 0x00000002u) {
      key_lb_ = from.key_lb_;
    }
    if (cached_has_bits & 0x00000004u) {
      node_count_ = from.node_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      qps_sample_rate_ = from.qps_sample_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_qps_second_ = from.max_qps_second_;
    }
    if (cached_has_bits & 0x00000020u) {
      runtime_ = from.runtime_;
    }
    if (cached_has_bits & 0x00000040u) {
      op_count_ = from.op_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      contains_ = from.contains_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      insert_ = from.insert_;
    }
    if (cached_has_bits & 0x00000200u) {
      remove_ = from.remove_;
    }
    if (cached_has_bits & 0x00000400u) {
      key_ub_ = from.key_ub_;
    }
    if (cached_has_bits & 0x00000800u) {
      region_size_ = from.region_size_;
    }
    if (cached_has_bits & 0x00001000u) {
      thread_count_ = from.thread_count_;
    }
    if (cached_has_bits & 0x00002000u) {
      qp_max_ = from.qp_max_;
    }
    if (cached_has_bits & 0x00004000u) {
      node_id_ = from.node_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExperimentParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ExperimentParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExperimentParams::CopyFrom(const ExperimentParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExperimentParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExperimentParams::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ExperimentParams::InternalSwap(ExperimentParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExperimentParams, node_count_)
      + sizeof(ExperimentParams::node_count_)
      - PROTOBUF_FIELD_OFFSET(ExperimentParams, unlimited_stream_)>(
          reinterpret_cast<char*>(&unlimited_stream_),
          reinterpret_cast<char*>(&other->unlimited_stream_));
  swap(qps_sample_rate_, other->qps_sample_rate_);
  swap(max_qps_second_, other->max_qps_second_);
  swap(runtime_, other->runtime_);
  swap(op_count_, other->op_count_);
  swap(contains_, other->contains_);
  swap(insert_, other->insert_);
  swap(remove_, other->remove_);
  swap(key_ub_, other->key_ub_);
  swap(region_size_, other->region_size_);
  swap(thread_count_, other->thread_count_);
  swap(qp_max_, other->qp_max_);
  swap(node_id_, other->node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExperimentParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResultProto::InitAsDefaultInstance() {
  ::_ResultProto_default_instance_._instance.get_mutable()->params_ = const_cast< ::ExperimentParams*>(
      ::ExperimentParams::internal_default_instance());
}
class ResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResultProto>()._has_bits_);
  static const ::ExperimentParams& params(const ResultProto* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ExperimentParams&
ResultProto::_Internal::params(const ResultProto* msg) {
  return *msg->params_;
}
void ResultProto::clear_driver() {
  driver_.Clear();
}
ResultProto::ResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  driver_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ResultProto)
}
ResultProto::ResultProto(const ResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      driver_(from.driver_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_params()) {
    params_ = new ::ExperimentParams(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ResultProto)
}

void ResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResultProto_experiment_2eproto.base);
  params_ = nullptr;
}

ResultProto::~ResultProto() {
  // @@protoc_insertion_point(destructor:ResultProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResultProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete params_;
}

void ResultProto::ArenaDtor(void* object) {
  ResultProto* _this = reinterpret_cast< ResultProto* >(object);
  (void)_this;
}
void ResultProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResultProto& ResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResultProto_experiment_2eproto.base);
  return *internal_default_instance();
}


void ResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  driver_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(params_ != nullptr);
    params_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ExperimentParams params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .rome.WorkloadDriverProto driver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_driver(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResultProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ExperimentParams params = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::params(this), target, stream);
  }

  // repeated .rome.WorkloadDriverProto driver = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_driver_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_driver(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResultProto)
  return target;
}

size_t ResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResultProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rome.WorkloadDriverProto driver = 2;
  total_size += 1UL * this->_internal_driver_size();
  for (const auto& msg : this->driver_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .ExperimentParams params = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResultProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResultProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ResultProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ResultProto)
    MergeFrom(*source);
  }
}

void ResultProto::MergeFrom(const ResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  driver_.MergeFrom(from.driver_);
  if (from._internal_has_params()) {
    _internal_mutable_params()->::ExperimentParams::MergeFrom(from._internal_params());
  }
}

void ResultProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultProto::CopyFrom(const ResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultProto::IsInitialized() const {
  if (_internal_has_params()) {
    if (!params_->IsInitialized()) return false;
  }
  return true;
}

void ResultProto::InternalSwap(ResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  driver_.InternalSwap(&other->driver_);
  swap(params_, other->params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AckProto* Arena::CreateMaybeMessage< ::AckProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AckProto >(arena);
}
template<> PROTOBUF_NOINLINE ::ExperimentParams* Arena::CreateMaybeMessage< ::ExperimentParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ExperimentParams >(arena);
}
template<> PROTOBUF_NOINLINE ::ResultProto* Arena::CreateMaybeMessage< ::ResultProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResultProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
