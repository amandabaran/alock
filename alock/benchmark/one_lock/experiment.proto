syntax = "proto2";

import "protos/metrics.proto";
import "protos/colosseum.proto";
import "alock/cluster/cluster.proto";

message AckProto {};

message Workload {
  // Length of "critical section"
  optional uint32 think_time_ns = 1;

  // The benchmark length in seconds
  optional int32 runtime = 2;

  optional uint64 min_key = 3;
  optional uint64 max_key = 4;

  optional double theta = 5;
  
  optional double p_local = 6;
  
};

message RemotePtrProto {
  optional uint64 raw = 1;
};

message ExperimentParams {
  // A name to give the experiment, used to prefix the result file
  optional string name = 1;

  // Whether to prefill range of locks or just one
  optional bool prefill = 2;

  // The number of nodes in the system
  optional uint32 num_nodes = 3;

  // A list of node ids to run on this node when running multiple nodes/servers per physical node
  repeated uint32 node_ids = 4;

  // The offered load in queries (or ops) per second
  optional int32 max_qps = 5;

  // The rate at which the actual QPS is sampled in milliseconds
  optional uint32 sampling_rate_ms = 6;

  // Directory where the results file is saved
  optional string save_dir = 7;

  optional Workload workload = 8;

  // Number of threads per node
  optional uint32 num_threads = 9;
};

message CloudlabClusterProto {
  optional X.ClusterProto cluster = 1;
  optional string domain = 2;
  optional string node_type = 3;
};

message ResultProto {
  optional X.NodeProto node = 1;
  optional rome.WorkloadDriverProto driver = 2;
};

message ResultsProto {
  optional uint32 cluster_size = 4;
  optional ExperimentParams experiment_params = 1;
  repeated ResultProto results = 2;
}