syntax = "proto2";

import "protos/metrics.proto";
import "protos/colosseum.proto";
import "alock/src/cluster/cluster.proto";

message AckProto {};

message Workload {
  // Length of "critical section"
  optional uint32 think_time_ns = 1;

  // The benchmark length in seconds
  optional int32 runtime = 2;

  optional uint64 min_key = 3;
  optional uint64 max_key = 4;

  optional double theta = 5;
  
  //between 0 and 1
  optional double p_local = 6;  
};

message RemotePtrProto {
  optional uint64 raw = 1;
};

message ExperimentParams {
  // A name to give the experiment, used to prefix the result file
  optional string name = 1;

  // Whether to prefill range of locks or just one
  optional bool prefill = 2;

  // The number of nodes in the system
  optional uint32 num_nodes = 3;

  // A list of node ids to run on this node when running multiple clients per physical node
  repeated uint32 client_ids = 4;

  // The offered load in queries (or ops) per second
  optional int32 max_qps = 5;

  // The rate at which the actual QPS is sampled in milliseconds
  optional uint32 sampling_rate_ms = 6;

  // Directory where the results file is saved
  optional string save_dir = 7;

  optional Workload workload = 8;

  // Number of threads per node
  optional uint32 num_threads = 9;

  //Total number of clients in the system (num_threads*num_nodes)
  optional uint32 num_clients = 10;

  //Inital budget for each cohort in ALock
  optional int64 budget = 11;
};

message CloudlabClusterProto {
  optional X.ClusterProto cluster = 1;
  optional string domain = 2;
  optional string node_type = 3;
};

message ResultProto {
  optional ExperimentParams experiment_params = 1;
  optional X.NodeProto client = 2;
  optional rome.WorkloadDriverProto driver = 3;
  optional MetricProto local_summary = 4;
  optional MetricProto remote_summary = 5;
};

message ResultsProto {
  optional uint32 cluster_size = 4;
  optional ExperimentParams experiment_params = 1;
  repeated ResultProto results = 2;
}

message MetricProto {
    optional string name = 1;
    oneof metric {
      CounterProto counter = 2;
      StopwatchProto stopwatch = 3;
      SummaryProto summary = 4;
    }
  };
  
  message CounterProto {
    optional uint64 count = 1;
  };
  
  message StopwatchProto {
    optional uint64 runtime_ns = 1;
  };
  
  message SummaryProto {
    // Measurement units
    optional string units = 1;
  
    // Summary statistics
    optional double mean = 2;
    optional double stddev = 3;
    optional double min = 4;
    optional double p50 = 6;
    optional double p90 = 7;
    optional double p95 = 8;
    optional double p99 = 9;
    optional double p999 = 10;
    optional double max = 11;
  
    // Total number of samples collected.
    optional uint64 count = 12;
  };